This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.gitignore
app/actions/documents.ts
app/api/process/route.ts
app/api/sessions/[sessionId]/regenerate-audio/route.ts
app/api/sessions/[sessionId]/route.ts
app/api/sessions/route.ts
app/api/test-audio/route.ts
app/api/upload/route.tsx
app/api/youtube/route.ts
app/dashboard/page.tsx
app/documents/page.tsx
app/flashcards/[id]/page.tsx
app/flashcards/loading.tsx
app/flashcards/page.tsx
app/globals.css
app/layout.tsx
app/marketplace/page.tsx
app/metadata.ts
app/page.tsx
app/podcasts/[id]/page.tsx
app/podcasts/loading.tsx
app/podcasts/page.tsx
app/sessions/[sessionId]/page.tsx
app/sessions/new/page.tsx
app/sign-in/[[...sign-in]]/page.tsx
app/sign-up/[[...sign-up]]/page.tsx
app/summaries/[id]/page.tsx
app/summaries/loading.tsx
app/summaries/page.tsx
app/upload/page.tsx
app/workspace/loading.tsx
app/workspace/page.tsx
components.json
components/avatar.tsx
components/chat-panel.tsx
components/checkbox.tsx
components/dashboard-header.tsx
components/dashboard-shell.tsx
components/interactive-flashcards.tsx
components/overview.tsx
components/recent-uploads.tsx
components/resizable.tsx
components/scroll-area.tsx
components/sessions-list-client.tsx
components/sessions-list.tsx
components/shell.tsx
components/skeleton.tsx
components/slider.tsx
components/sources-panel.tsx
components/studio-panel.tsx
components/theme-provider.tsx
components/theme-toggle.tsx
components/ui/alert.tsx
components/ui/badge.tsx
components/ui/button.tsx
components/ui/card.tsx
components/ui/checkbox.tsx
components/ui/dialog.tsx
components/ui/dropdown-menu.tsx
components/ui/input.tsx
components/ui/label.tsx
components/ui/progress.tsx
components/ui/resizable.tsx
components/ui/scroll-area.tsx
components/ui/skeleton.tsx
components/ui/slider.tsx
components/ui/tabs.tsx
components/ui/textarea.tsx
components/upload-button.tsx
components/upload-document.tsx
components/workspace-header.tsx
db/index.ts
db/migrations/0000_initial_schema.sql
db/migrations/0000_initial_schema.ts
db/migrations/0000_initial.sql
db/run-migration.js
db/schema.ts
drizzle.config.ts
eslint.config.mjs
lib/actions/gemini.ts
lib/utils.ts
lib/utils/flashcard-formatter.ts
middleware.ts
next.config.ts
package.json
podcast.txt
postcss.config.js
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
scripts/migrate.ts
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/marketplace/page.tsx">
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Plus, FileText, BookOpen, X } from "lucide-react";

const sampleListings = [
  {
    id: 1,
    title: "Calculus Chapter 1 Notes",
    description: "Comprehensive notes covering limits, derivatives, and continuity.",
    price: 49,
    category: "Notes",
    uploader: "Aditi Sharma",
  },
  {
    id: 2,
    title: "Physics Formula Sheet",
    description: "All key formulas for Class 12 Physics in one place.",
    price: 0,
    category: "Formula Sheet",
    uploader: "Rahul Verma",
  },
  {
    id: 3,
    title: "Organic Chemistry Mindmap",
    description: "Visual mindmap for quick revision before exams.",
    price: 79,
    category: "Mindmap",
    uploader: "Priya Singh",
  },
];

function CreateListingModal({ open, onClose }: { open: boolean; onClose: () => void }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
      <div className="bg-background rounded-xl shadow-lg w-full max-w-md p-6 relative">
        <button
          className="absolute top-3 right-3 text-muted-foreground hover:text-foreground"
          onClick={onClose}
          aria-label="Close"
        >
          <X className="h-5 w-5" />
        </button>
        <h2 className="text-2xl font-bold mb-2 flex items-center gap-2">
          <Plus className="h-6 w-6 text-primary" /> Create Listing
        </h2>
        <p className="text-muted-foreground mb-4">Share your notes or study materials with the community.</p>
        <form className="space-y-4" onSubmit={e => { e.preventDefault(); onClose(); }}>
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="listing-title">Title</label>
            <input id="listing-title" name="title" type="text" className="w-full rounded border px-3 py-2" placeholder="e.g. Calculus Chapter 1 Notes" required />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="listing-desc">Description</label>
            <textarea id="listing-desc" name="description" className="w-full rounded border px-3 py-2" rows={2} placeholder="Brief description" required />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="listing-category">Category</label>
            <select id="listing-category" name="category" className="w-full rounded border px-3 py-2" required>
              <option value="Notes">Notes</option>
              <option value="Formula Sheet">Formula Sheet</option>
              <option value="Mindmap">Mindmap</option>
              <option value="Other">Other</option>
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="listing-file">Upload File</label>
            <input id="listing-file" name="file" type="file" className="w-full" required />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1" htmlFor="listing-price">Price (₹)</label>
            <input id="listing-price" name="price" type="number" min="0" step="1" className="w-full rounded border px-3 py-2" placeholder="Free or set your price" required />
          </div>
          <Button type="submit" className="w-full" variant="default">
            Create Listing (Demo Only)
          </Button>
        </form>
      </div>
    </div>
  );
}

export default function MarketplacePage() {
  const [modalOpen, setModalOpen] = useState(false);
  return (
    <div className="min-h-screen flex flex-col">
      <div className="container py-12 flex flex-col gap-8">
        <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
          <div>
            <h1 className="text-3xl md:text-4xl font-bold mb-2 flex items-center gap-2">
              <BookOpen className="h-7 w-7 text-primary" /> Marketplace
            </h1>
            <p className="text-muted-foreground max-w-xl">
              Browse and purchase notes, mindmaps, and other study materials uploaded by students. Share your own and earn!
            </p>
          </div>
          <Button size="lg" className="rounded-full" onClick={() => setModalOpen(true)}>
            <Plus className="h-5 w-5 mr-2" /> Create Listing
          </Button>
        </div>

        {/* Listings Grid */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8">
          {sampleListings.map(listing => (
            <Card key={listing.id} className="flex flex-col h-full">
              <CardHeader>
                <div className="flex items-center gap-2 mb-1">
                  <FileText className="h-5 w-5 text-primary" />
                  <CardTitle>{listing.title}</CardTitle>
                </div>
                <CardDescription>{listing.category} • Uploaded by {listing.uploader}</CardDescription>
              </CardHeader>
              <CardContent className="flex-1">
                <p className="text-muted-foreground mb-2">{listing.description}</p>
              </CardContent>
              <CardFooter className="flex items-center justify-between">
                <span className="font-semibold text-primary">
                  {listing.price === 0 ? "Free" : `₹${listing.price}`}
                </span>
                <Button size="sm" variant="secondary" disabled>
                  View / Buy
                </Button>
              </CardFooter>
            </Card>
          ))}
        </div>
      </div>
      <CreateListingModal open={modalOpen} onClose={() => setModalOpen(false)} />
    </div>
  );
}
</file>

<file path="app/actions/documents.ts">
'use server';

import { db } from '@/db';
import { documents } from '@/db/schema';
import { currentUser } from '@clerk/nextjs/server';
import { eq } from 'drizzle-orm';

export async function uploadDocument(formData: FormData) {
  const user = await currentUser();
  if (!user) throw new Error('Unauthorized');

  const title = formData.get('title') as string;
  const content = formData.get('content') as string;
  const file = formData.get('file') as File;

  if (!title || !content) {
    throw new Error('Missing required fields');
  }

  try {
    // Here you would typically upload the file to a storage service
    // and get back a URL. For now, we'll just store the content.
    
    const document = await db.insert(documents).values({
      userId: user.id,
      title,
      content,
      fileType: file ? file.type : null,
      fileUrl: null, // You would store the URL from your file storage service here
    });

    return { success: true, document };
  } catch (error) {
    console.error('Error uploading document:', error);
    throw new Error('Failed to upload document');
  }
}

export async function getUserDocuments() {
  const user = await currentUser();
  if (!user) throw new Error('Unauthorized');

  try {
    const userDocuments = await db
      .select()
      .from(documents)
      .where(eq(documents.userId, user.id));

    return userDocuments;
  } catch (error) {
    console.error('Error fetching documents:', error);
    throw new Error('Failed to fetch documents');
  }
}
</file>

<file path="app/api/sessions/[sessionId]/regenerate-audio/route.ts">
import { NextRequest, NextResponse } from "next/server";
import { db } from "@/db";
import { sessions, generatedContent } from "@/db/schema";
import { eq, and } from "drizzle-orm";
import { createClient } from "@deepgram/sdk";
import fs from "fs";
import path from "path";
import { pipeline } from "stream/promises";
import { Readable } from "stream";

// Function to generate audio from text using Deepgram
async function generateAudio(text: string): Promise<string | null> {
  try {
    const deepgramApiKey = process.env.DEEPGRAM_API_KEY;
    if (!deepgramApiKey) {
      console.error("DEEPGRAM_API_KEY environment variable not set!");
      throw new Error(
        "Server configuration error: Deepgram API Key is missing."
      );
    }

    // Enforce strict 2000 character limit for Deepgram
    const MAX_CHARACTER_LIMIT = 2000;
    if (text.length > MAX_CHARACTER_LIMIT) {
      console.warn(
        `Text exceeds ${MAX_CHARACTER_LIMIT} character limit. Truncating...`
      );
      text = text.substring(0, MAX_CHARACTER_LIMIT);
    }

    const deepgram = createClient(deepgramApiKey);

    // Create a unique filename
    const timestamp = new Date().getTime();
    const outputDir = path.join(process.cwd(), "public", "audio");
    const outputFileName = `regenerated-${timestamp}.mp3`;
    const outputPath = path.join(outputDir, outputFileName);
    const publicPath = `/audio/${outputFileName}`;

    // Ensure the directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const response = await deepgram.speak.request(
      { text },
      { model: "aura-arcas-en" }
    );

    const stream = await response.getStream();
    if (stream) {
      const file = fs.createWriteStream(outputPath);

      // Convert Web Stream to Node.js Readable stream
      const chunks: Uint8Array[] = [];
      const reader = stream.getReader();

      let done = false;
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        if (value) {
          chunks.push(value);
        }
      }

      // Create a readable stream from the chunks
      const nodeStream = Readable.from(Buffer.concat(chunks));

      // Pipe to file using Node.js streams
      await pipeline(nodeStream, file);

      console.log(`Audio file written to ${outputPath}`);
      return publicPath;
    } else {
      console.error("Error generating audio: No stream returned");
      return null;
    }
  } catch (error) {
    console.error("Error generating audio with Deepgram:", error);
    return null;
  }
}

export async function POST(
  request: NextRequest,
  context: { params: { sessionId: string } }
) {
  const params = context.params;
  const sessionId = parseInt(params.sessionId, 10);

  if (isNaN(sessionId)) {
    return NextResponse.json({ error: "Invalid Session ID" }, { status: 400 });
  }

  try {
    // Get body data
    const { contentId, contentType } = await request.json();

    if (!contentId) {
      return NextResponse.json(
        { error: "Content ID is required" },
        { status: 400 }
      );
    }

    // Find the content item
    const contentItem = await db.query.generatedContent.findFirst({
      where: and(
        eq(generatedContent.id, contentId),
        eq(generatedContent.sessionId, sessionId)
      ),
    });

    if (!contentItem) {
      return NextResponse.json({ error: "Content not found" }, { status: 404 });
    }

    // Extract the text content based on content type (monologue, summary, etc.)
    let textToConvert = "";
    let originalContent = contentItem.content;

    console.log(
      `Processing content item ID ${contentId} of type ${contentType}`
    );
    console.log("Original content type:", typeof originalContent);

    // Log the first part of the content to understand its structure without logging everything
    if (typeof originalContent === "string") {
      console.log(
        "Content preview (string):",
        originalContent.substring(0, 200) + "..."
      );
    } else {
      console.log(
        "Content preview (object):",
        JSON.stringify(originalContent).substring(0, 200) + "..."
      );
    }

    if (typeof originalContent === "string") {
      try {
        const parsed = JSON.parse(originalContent);
        console.log("Parsed content type:", typeof parsed);

        if (contentType === "monologue" || contentType === "podcast") {
          // For audio content, try multiple possible text locations
          if (
            typeof parsed === "object" &&
            parsed !== null &&
            "text" in parsed
          ) {
            textToConvert = parsed.text as string;
          } else if (
            typeof parsed === "object" &&
            parsed !== null &&
            "content" in parsed &&
            typeof parsed.content === "string"
          ) {
            textToConvert = parsed.content;
          } else if (typeof parsed === "string") {
            textToConvert = parsed;
          } else {
            // Fallback to stringify if no text field is found
            textToConvert = JSON.stringify(parsed);
          }
        } else if (contentType === "summary") {
          // For summaries
          if (typeof parsed === "string") {
            textToConvert = parsed;
          } else if (
            typeof parsed === "object" &&
            parsed !== null &&
            "content" in parsed &&
            typeof parsed.content === "string"
          ) {
            textToConvert = parsed.content;
          } else {
            textToConvert = JSON.stringify(parsed);
          }
        } else {
          // For other content types
          textToConvert =
            typeof parsed === "string" ? parsed : JSON.stringify(parsed);
        }
      } catch (e) {
        console.log("Error parsing content as JSON, using as raw text");
        textToConvert = originalContent;
      }
    } else if (
      typeof originalContent === "object" &&
      originalContent !== null
    ) {
      // Content is already an object
      const contentObj = originalContent as Record<string, any>;
      if (contentType === "monologue" || contentType === "podcast") {
        textToConvert =
          contentObj.text || contentObj.content || JSON.stringify(contentObj);
      } else {
        textToConvert = JSON.stringify(contentObj);
      }
    } else {
      textToConvert = String(originalContent || "");
    }

    console.log(`Text to convert length: ${textToConvert.length}`);
    console.log(
      `Text to convert preview: ${textToConvert.substring(0, 100)}...`
    );

    // Generate audio from the text
    const audioPath = await generateAudio(textToConvert);

    if (!audioPath) {
      return NextResponse.json(
        {
          error: "Failed to generate audio",
        },
        { status: 500 }
      );
    }

    console.log(`Generated audio path: ${audioPath}`);

    // Update the content item with the new audio path
    let updatedContent;

    if (typeof originalContent === "string") {
      try {
        const parsed = JSON.parse(originalContent);
        if (typeof parsed === "object" && parsed !== null) {
          // Update existing object as Record<string, any>
          const parsedObj = parsed as Record<string, any>;
          parsedObj.audioPath = audioPath;
          if (contentType === "monologue" || contentType === "podcast") {
            // Make sure we have the text stored too
            if (!parsedObj.text) {
              parsedObj.text = textToConvert;
            }
          }
          updatedContent = JSON.stringify(parsedObj);
        } else {
          // Create a new object with text and audioPath
          updatedContent = JSON.stringify({
            text: textToConvert,
            audioPath: audioPath,
          });
        }
      } catch (e) {
        // Create a new object with the original content as text
        updatedContent = JSON.stringify({
          text: originalContent,
          audioPath: audioPath,
        });
      }
    } else if (
      typeof originalContent === "object" &&
      originalContent !== null
    ) {
      // For object content, ensure we update the right object
      const contentObj = { ...originalContent } as Record<string, any>;
      contentObj.audioPath = audioPath;
      // Ensure text is stored
      if (contentType === "monologue" || contentType === "podcast") {
        if (!contentObj.text) {
          contentObj.text = textToConvert;
        }
      }
      updatedContent = contentObj;
    } else {
      // Fallback for any other type
      updatedContent = {
        text: String(originalContent || ""),
        audioPath: audioPath,
      };
    }

    console.log(
      "Updated content structure:",
      typeof updatedContent === "string"
        ? updatedContent.substring(0, 100) + "..."
        : JSON.stringify(updatedContent).substring(0, 100) + "..."
    );

    // Update the content item in the database
    await db
      .update(generatedContent)
      .set({
        content: updatedContent,
        updatedAt: new Date(),
      })
      .where(eq(generatedContent.id, contentId));

    return NextResponse.json({
      success: true,
      audioPath,
      message: "Audio regenerated successfully",
    });
  } catch (error) {
    console.error("Error in regenerate audio API:", error);
    return NextResponse.json(
      {
        error: "Failed to process request",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/test-audio/route.ts">
import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@deepgram/sdk";
import fs from "fs";
import path from "path";
import { pipeline } from "stream/promises";
import { Readable } from "stream";

// Function to generate audio from text using Deepgram
async function generateTestAudio(text: string): Promise<string | null> {
  try {
    const deepgramApiKey = process.env.DEEPGRAM_API_KEY;
    if (!deepgramApiKey) {
      console.error("DEEPGRAM_API_KEY environment variable not set!");
      throw new Error(
        "Server configuration error: Deepgram API Key is missing."
      );
    }

    // Enforce strict 2000 character limit for Deepgram
    const MAX_CHARACTER_LIMIT = 2000;
    if (text.length > MAX_CHARACTER_LIMIT) {
      console.warn(
        `Text exceeds ${MAX_CHARACTER_LIMIT} character limit. Truncating...`
      );
      text = text.substring(0, MAX_CHARACTER_LIMIT);
    }

    const deepgram = createClient(deepgramApiKey);

    // Create a unique filename
    const timestamp = new Date().getTime();
    const outputDir = path.join(process.cwd(), "public", "audio");
    const outputFileName = `test-${timestamp}.mp3`;
    const outputPath = path.join(outputDir, outputFileName);
    const publicPath = `/audio/${outputFileName}`;

    console.log("Test audio generation parameters:");
    console.log("- API Key exists:", !!deepgramApiKey);
    console.log("- Text length:", text.length);
    console.log("- Output directory:", outputDir);
    console.log("- Output file:", outputFileName);

    // Ensure the directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
      console.log("Created output directory");
    }

    console.log("Making Deepgram request...");
    const response = await deepgram.speak.request(
      { text },
      { model: "aura-arcas-en" }
    );
    console.log("Deepgram response received");

    const stream = await response.getStream();
    if (stream) {
      console.log("Got audio stream from Deepgram");
      const file = fs.createWriteStream(outputPath);

      // Convert Web Stream to Node.js Readable stream
      const chunks: Uint8Array[] = [];
      const reader = stream.getReader();

      let done = false;
      let bytesRead = 0;
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        if (value) {
          chunks.push(value);
          bytesRead += value.length;
        }
      }

      console.log(`Read ${bytesRead} bytes from stream`);

      // Create a readable stream from the chunks
      const buffer = Buffer.concat(chunks);
      const nodeStream = Readable.from(buffer);

      // Pipe to file using Node.js streams
      await pipeline(nodeStream, file);

      console.log(`Audio file written to ${outputPath}`);

      // Double check file exists
      const fileExists = fs.existsSync(outputPath);
      const fileSize = fileExists ? fs.statSync(outputPath).size : 0;
      console.log(`File exists: ${fileExists}, Size: ${fileSize} bytes`);

      return publicPath;
    } else {
      console.error("Error generating audio: No stream returned");
      return null;
    }
  } catch (error) {
    console.error("Error generating test audio with Deepgram:", error);
    return null;
  }
}

export async function POST(request: NextRequest) {
  try {
    // Get body data
    const { text } = await request.json();

    if (!text) {
      return NextResponse.json({ error: "Text is required" }, { status: 400 });
    }

    console.log(
      `Test audio generation request received with text length: ${text.length}`
    );

    // Generate audio from the text
    const audioPath = await generateTestAudio(text);

    if (!audioPath) {
      return NextResponse.json(
        {
          error: "Failed to generate test audio",
        },
        { status: 500 }
      );
    }

    return NextResponse.json({
      success: true,
      audioPath,
      message: "Test audio generated successfully",
    });
  } catch (error) {
    console.error("Error in test audio API:", error);
    return NextResponse.json(
      {
        error: "Failed to process request",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/upload/route.tsx">
// app/api/upload/route.ts - API route handler for uploads

import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    const formData = await request.formData();
    const file = formData.get("file") as File;
    const processingOption = formData.get("processingOption") as string;

    if (!file) {
      return NextResponse.json(
        { success: false, message: "No file provided" },
        { status: 400 }
      );
    }

    // Processing would typically be handled by backend logic
    // This would connect to your actual processing functions

    // Return a success response
    return NextResponse.json({
      success: true,
      message: "File received and being processed",
      processingOption,
      filename: file.name,
      size: file.size,
    });
  } catch (error) {
    console.error("Upload error:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Failed to process the upload",
        error: String(error),
      },
      { status: 500 }
    );
  }
}

export async function GET() {
  return NextResponse.json({ message: "Upload API is running" });
}
</file>

<file path="app/api/youtube/route.ts">
import { NextRequest, NextResponse } from "next/server";
import { db } from "@/db";
import { generated_content } from "@/db/schema";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

export async function POST(request: NextRequest) {
  try {
    const { url, sessionId, userId } = await request.json();

    if (!url || !sessionId || !userId) {
      return NextResponse.json(
        { success: false, message: "Missing required fields" },
        { status: 400 }
      );
    }

    // In a real application, you would:
    // 1. Download the YouTube video transcript
    // 2. Process it with Gemini
    // 3. Store the generated content

    // For now, we'll use a mock response
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // Generate summary
    const summaryPrompt = `Generate a summary of this YouTube video (${url}): [CONTENT]`;
    const summaryResult = await model.generateContent(summaryPrompt);
    const summary = await summaryResult.response.text();

    // Generate flashcards
    const flashcardsPrompt = `Generate flashcards from this YouTube video (${url}): [CONTENT]`;
    const flashcardsResult = await model.generateContent(flashcardsPrompt);
    const flashcards = await flashcardsResult.response.text();

    // Generate podcast script
    const podcastPrompt = `Generate a podcast script from this YouTube video (${url}): [CONTENT]`;
    const podcastResult = await model.generateContent(podcastPrompt);
    const podcast = await podcastResult.response.text();

    // Store the generated content
    const [newContent] = await db
      .insert(generated_content)
      .values({
        sessionId,
        content: {
          summary,
          flashcards,
          podcast,
        },
      })
      .returning();

    return NextResponse.json({
      success: true,
      content: newContent,
    });
  } catch (error) {
    console.error("Error in YouTube route:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Error processing YouTube video",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
</file>

<file path="app/documents/page.tsx">
import { UploadDocument } from "@/components/upload-document";
import { DashboardShell } from "@/components/shell";

export default function DocumentsPage() {
  return (
    <DashboardShell>
      <div className="container py-8">
        <div className="max-w-2xl mx-auto">
          <h1 className="text-2xl font-bold mb-6">Upload Document</h1>
          <UploadDocument />
        </div>
      </div>
    </DashboardShell>
  );
}
</file>

<file path="app/flashcards/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/flashcards/page.tsx">
import { DashboardHeader } from "@/components/dashboard-header"
import { DashboardShell } from "@/components/dashboard-shell"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { BookOpen, Plus, Search } from "lucide-react"

export default function FlashcardsPage() {
  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader />
      <DashboardShell>
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold tracking-tight">Flashcards</h2>
          <div className="flex items-center gap-2">
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input type="search" placeholder="Search flashcards..." className="w-[200px] pl-8 md:w-[300px]" />
            </div>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Set
            </Button>
          </div>
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>Machine Learning Basics</CardTitle>
              <CardDescription>20 cards • Created 3 days ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Core concepts and terminology for machine learning fundamentals.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Edit</Button>
              <Button>Study Now</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Data Structures</CardTitle>
              <CardDescription>15 cards • Created 1 week ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Arrays, linked lists, trees, and other fundamental data structures.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Edit</Button>
              <Button>Study Now</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Web Development</CardTitle>
              <CardDescription>25 cards • Created 2 weeks ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                HTML, CSS, JavaScript and modern web development concepts.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Edit</Button>
              <Button>Study Now</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Quantum Computing</CardTitle>
              <CardDescription>12 cards • Created 3 weeks ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Introduction to quantum bits, quantum gates, and quantum algorithms.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Edit</Button>
              <Button>Study Now</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Artificial Intelligence</CardTitle>
              <CardDescription>18 cards • Created 1 month ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                AI concepts, neural networks, and machine learning algorithms.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Edit</Button>
              <Button>Study Now</Button>
            </CardFooter>
          </Card>
          <Card className="flex flex-col items-center justify-center border-dashed p-8 text-center">
            <BookOpen className="h-10 w-10 text-muted-foreground mb-4" />
            <h3 className="font-medium mb-2">Create New Flashcard Set</h3>
            <p className="text-sm text-muted-foreground mb-4">Upload a document or add content manually</p>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Set
            </Button>
          </Card>
        </div>
      </DashboardShell>
    </div>
  )
}
</file>

<file path="app/metadata.ts">
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Acharya - AI Learning Assistant",
  description: "Transform your learning materials into interactive content",
};
</file>

<file path="app/podcasts/[id]/page.tsx">
import { DashboardHeader } from "@/components/dashboard-header"
import { DashboardShell } from "@/components/dashboard-shell"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Download, Share2, BookOpen, Play, SkipBack, SkipForward, Volume2 } from "lucide-react"
import { Slider } from "@/components/ui/slider"

export default function PodcastPage({ params }: { params: { id: string } }) {
  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader />
      <DashboardShell>
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">History of Computing</h2>
            <p className="text-muted-foreground">15:30 • Generated 3 days ago</p>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
            <Button variant="outline" size="sm">
              <Share2 className="mr-2 h-4 w-4" />
              Share
            </Button>
            <Button size="sm">
              <BookOpen className="mr-2 h-4 w-4" />
              View Transcript
            </Button>
          </div>
        </div>

        <Card className="mb-8">
          <CardContent className="p-6">
            <div className="flex flex-col items-center">
              <div className="w-48 h-48 bg-gradient-to-br from-primary/20 to-purple-500/20 rounded-lg flex items-center justify-center mb-6">
                <Volume2 className="h-24 w-24 text-primary/60" />
              </div>

              <div className="w-full max-w-2xl">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm text-muted-foreground">4:15</span>
                  <span className="text-sm text-muted-foreground">15:30</span>
                </div>
                <Slider defaultValue={[27]} max={100} step={1} className="mb-6" />

                <div className="flex items-center justify-center gap-4">
                  <Button variant="outline" size="icon" className="h-10 w-10 rounded-full">
                    <SkipBack className="h-4 w-4" />
                  </Button>
                  <Button size="icon" className="h-14 w-14 rounded-full">
                    <Play className="h-6 w-6" />
                  </Button>
                  <Button variant="outline" size="icon" className="h-10 w-10 rounded-full">
                    <SkipForward className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <h3 className="text-xl font-bold mb-4">Transcript</h3>
            <div className="prose dark:prose-invert max-w-none">
              <p>
                Welcome to this audio summary on the History of Computing. Today, we'll explore the fascinating
                evolution of computing technology from its earliest mechanical beginnings to the powerful digital
                systems we use today.
              </p>

              <p>
                The story of computing begins long before electronic computers. In ancient times, civilizations used
                simple calculating tools like the abacus. These early devices helped with basic arithmetic but lacked
                the ability to perform complex calculations automatically.
              </p>

              <p>
                The first major breakthrough came in the 17th century when Blaise Pascal invented a mechanical
                calculator called the Pascaline. This was followed by Gottfried Wilhelm Leibniz's Stepped Reckoner,
                which could perform all four arithmetic operations.
              </p>

              <p>
                The 19th century saw Charles Babbage design the Difference Engine and later the Analytical Engine, which
                incorporated many features of modern computers including conditional branching and memory. Though never
                fully built in his lifetime, Babbage's designs were revolutionary. Ada Lovelace, often considered the
                first programmer, wrote theoretical operations for the Analytical Engine.
              </p>

              <p>
                The early 20th century brought electromechanical computers like the Harvard Mark I and advances in
                theoretical computer science from Alan Turing. World War II accelerated development with machines like
                the British Colossus and the American ENIAC, often considered the first general-purpose electronic
                computer.
              </p>

              <p>
                The invention of the transistor in 1947 at Bell Labs marked the beginning of the electronic age of
                computing. Transistors replaced vacuum tubes, making computers smaller, faster, and more reliable. This
                led to the development of mainframe computers in the 1950s and 1960s by companies like IBM.
              </p>

              <p>
                The 1970s saw the birth of the microprocessor, with Intel's 4004 being the first commercially available
                microprocessor. This innovation paved the way for personal computers, with the Altair 8800, Apple II,
                and IBM PC bringing computing to homes and small businesses.
              </p>

              <p>
                The 1980s and 1990s witnessed the rise of graphical user interfaces, the internet, and mobile computing.
                Microsoft Windows and Apple's Macintosh made computers more accessible to non-technical users, while the
                World Wide Web, created by Tim Berners-Lee in 1989, transformed how information was shared.
              </p>

              <p>
                The 21st century has seen exponential growth in computing power, following Moore's Law, which predicted
                that the number of transistors on a microchip would double approximately every two years. Cloud
                computing, artificial intelligence, quantum computing, and the Internet of Things represent the cutting
                edge of today's computing landscape.
              </p>

              <p>
                From mechanical calculators to quantum computers, the history of computing reflects humanity's ingenuity
                and our constant drive to process information more efficiently. Each innovation has built upon previous
                technologies, creating a rich tapestry of development that continues to evolve today.
              </p>

              <p>
                Thank you for listening to this summary of the History of Computing. For more detailed information,
                please refer to the full document or generate flashcards to test your knowledge on this topic.
              </p>
            </div>
          </CardContent>
        </Card>
      </DashboardShell>
    </div>
  )
}
</file>

<file path="app/podcasts/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/podcasts/page.tsx">
import { DashboardHeader } from "@/components/dashboard-header"
import { DashboardShell } from "@/components/dashboard-shell"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Headphones, Play, Plus, Search } from "lucide-react"

export default function PodcastsPage() {
  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader />
      <DashboardShell>
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold tracking-tight">Podcasts</h2>
          <div className="flex items-center gap-2">
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input type="search" placeholder="Search podcasts..." className="w-[200px] pl-8 md:w-[300px]" />
            </div>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Podcast
            </Button>
          </div>
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>History of Computing</CardTitle>
              <CardDescription>15:30 • Generated 3 days ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Listen to the evolution of computing from early mechanical devices to modern computers.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Download</Button>
              <Button>
                <Play className="mr-2 h-4 w-4" />
                Listen Now
              </Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Machine Learning Explained</CardTitle>
              <CardDescription>12:45 • Generated 1 week ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                A beginner-friendly explanation of machine learning concepts and applications.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Download</Button>
              <Button>
                <Play className="mr-2 h-4 w-4" />
                Listen Now
              </Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Web Development Trends</CardTitle>
              <CardDescription>18:20 • Generated 2 weeks ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Current trends and future directions in web development technologies.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Download</Button>
              <Button>
                <Play className="mr-2 h-4 w-4" />
                Listen Now
              </Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Quantum Computing Basics</CardTitle>
              <CardDescription>14:10 • Generated 3 weeks ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Introduction to quantum bits, quantum gates, and quantum algorithms.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Download</Button>
              <Button>
                <Play className="mr-2 h-4 w-4" />
                Listen Now
              </Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Artificial Intelligence Ethics</CardTitle>
              <CardDescription>20:35 • Generated 1 month ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Ethical considerations and challenges in AI development and deployment.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Download</Button>
              <Button>
                <Play className="mr-2 h-4 w-4" />
                Listen Now
              </Button>
            </CardFooter>
          </Card>
          <Card className="flex flex-col items-center justify-center border-dashed p-8 text-center">
            <Headphones className="h-10 w-10 text-muted-foreground mb-4" />
            <h3 className="font-medium mb-2">Create New Podcast</h3>
            <p className="text-sm text-muted-foreground mb-4">Generate audio from your documents or YouTube videos</p>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Podcast
            </Button>
          </Card>
        </div>
      </DashboardShell>
    </div>
  )
}
</file>

<file path="app/sign-in/[[...sign-in]]/page.tsx">
import { SignIn } from "@clerk/nextjs";

export default function SignInPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-background">
      <div className="w-full max-w-md p-6">
        <SignIn 
          path="/sign-in"
          routing="path"
          signUpUrl="/sign-up"
          afterSignInUrl="/dashboard"
          appearance={{
            elements: {
              rootBox: "mx-auto",
              card: "bg-background shadow-lg"
            }
          }}
        />
      </div>
    </div>
  );
}
</file>

<file path="app/sign-up/[[...sign-up]]/page.tsx">
import { SignUp } from "@clerk/nextjs";

export default function SignUpPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-background">
      <div className="w-full max-w-md p-6">
        <SignUp 
          path="/sign-up"
          routing="path"
          signInUrl="/sign-in"
          afterSignUpUrl="/dashboard"
          appearance={{
            elements: {
              rootBox: "mx-auto",
              card: "bg-background shadow-lg"
            }
          }}
        />
      </div>
    </div>
  );
}
</file>

<file path="app/summaries/[id]/page.tsx">
import { DashboardHeader } from "@/components/dashboard-header"
import { DashboardShell } from "@/components/dashboard-shell"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Download, Share2, BookOpen } from "lucide-react"

export default function SummaryPage({ params }: { params: { id: string } }) {
  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader />
      <DashboardShell>
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Introduction to Neural Networks</h2>
            <p className="text-muted-foreground">Generated from PDF • 3 days ago</p>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm">
              <Download className="mr-2 h-4 w-4" />
              Download
            </Button>
            <Button variant="outline" size="sm">
              <Share2 className="mr-2 h-4 w-4" />
              Share
            </Button>
            <Button size="sm">
              <BookOpen className="mr-2 h-4 w-4" />
              Generate Flashcards
            </Button>
          </div>
        </div>

        <Card className="mb-8">
          <CardHeader>
            <CardTitle>Executive Summary</CardTitle>
            <CardDescription>Key points from the document</CardDescription>
          </CardHeader>
          <CardContent>
            <ul className="list-disc list-inside space-y-2">
              <li>Neural networks are computational models inspired by the human brain's structure and function.</li>
              <li>They consist of interconnected nodes (neurons) organized in layers that process information.</li>
              <li>Deep learning is a subset of neural networks with multiple hidden layers.</li>
              <li>Neural networks excel at pattern recognition, classification, and prediction tasks.</li>
              <li>Training involves adjusting weights through backpropagation to minimize error.</li>
            </ul>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Detailed Summary</CardTitle>
            <CardDescription>Comprehensive overview of the document</CardDescription>
          </CardHeader>
          <CardContent className="prose dark:prose-invert max-w-none">
            <h3>Introduction</h3>
            <p>
              Neural networks represent a fundamental paradigm shift in computing, moving away from traditional
              algorithmic approaches toward systems that can learn from data. Inspired by the biological neural networks
              in the human brain, artificial neural networks (ANNs) have become the backbone of modern artificial
              intelligence and machine learning applications.
            </p>

            <h3>Structure and Components</h3>
            <p>
              At their core, neural networks consist of layers of interconnected nodes or "neurons." A typical neural
              network architecture includes:
            </p>
            <ul>
              <li>
                <strong>Input Layer:</strong> Receives the initial data or features
              </li>
              <li>
                <strong>Hidden Layers:</strong> Process the information through weighted connections
              </li>
              <li>
                <strong>Output Layer:</strong> Produces the final prediction or classification
              </li>
            </ul>
            <p>
              Each neuron applies an activation function to the weighted sum of its inputs, introducing non-linearity
              that allows the network to learn complex patterns.
            </p>

            <h3>Training Process</h3>
            <p>Neural networks learn through a process called training, which involves:</p>
            <ol>
              <li>
                <strong>Forward Propagation:</strong> Data passes through the network to generate predictions
              </li>
              <li>
                <strong>Error Calculation:</strong> The difference between predictions and actual values is measured
              </li>
              <li>
                <strong>Backpropagation:</strong> The error is propagated backward to adjust connection weights
              </li>
              <li>
                <strong>Optimization:</strong> Weights are updated using algorithms like gradient descent
              </li>
            </ol>
            <p>
              This iterative process continues until the network achieves satisfactory performance on the training data.
            </p>

            <h3>Types of Neural Networks</h3>
            <p>Various neural network architectures have been developed for specific tasks:</p>
            <ul>
              <li>
                <strong>Feedforward Neural Networks:</strong> The simplest form where information flows in one direction
              </li>
              <li>
                <strong>Convolutional Neural Networks (CNNs):</strong> Specialized for image processing and computer
                vision
              </li>
              <li>
                <strong>Recurrent Neural Networks (RNNs):</strong> Designed for sequential data like text and time
                series
              </li>
              <li>
                <strong>Long Short-Term Memory (LSTM):</strong> A type of RNN that addresses the vanishing gradient
                problem
              </li>
              <li>
                <strong>Generative Adversarial Networks (GANs):</strong> Used for generating new data similar to
                training data
              </li>
            </ul>

            <h3>Applications</h3>
            <p>Neural networks have revolutionized numerous fields:</p>
            <ul>
              <li>Computer vision and image recognition</li>
              <li>Natural language processing and translation</li>
              <li>Speech recognition and synthesis</li>
              <li>Medical diagnosis and drug discovery</li>
              <li>Financial forecasting and fraud detection</li>
              <li>Autonomous vehicles and robotics</li>
            </ul>

            <h3>Challenges and Limitations</h3>
            <p>Despite their power, neural networks face several challenges:</p>
            <ul>
              <li>Require large amounts of training data</li>
              <li>Computationally intensive to train</li>
              <li>Prone to overfitting without proper regularization</li>
              <li>Lack interpretability (the "black box" problem)</li>
              <li>Sensitive to hyperparameter choices</li>
            </ul>

            <h3>Conclusion</h3>
            <p>
              Neural networks represent one of the most significant advances in computing of the past few decades. As
              research continues and computational resources improve, their capabilities and applications will likely
              expand further, driving innovation across industries and scientific disciplines.
            </p>
          </CardContent>
        </Card>
      </DashboardShell>
    </div>
  )
}
</file>

<file path="app/summaries/loading.tsx">
export default function Loading() {
  return null
}
</file>

<file path="app/summaries/page.tsx">
import { DashboardHeader } from "@/components/dashboard-header"
import { DashboardShell } from "@/components/dashboard-shell"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { FileText, Plus, Search } from "lucide-react"

export default function SummariesPage() {
  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader />
      <DashboardShell>
        <div className="flex items-center justify-between">
          <h2 className="text-3xl font-bold tracking-tight">Summaries</h2>
          <div className="flex items-center gap-2">
            <div className="relative">
              <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
              <Input type="search" placeholder="Search summaries..." className="w-[200px] pl-8 md:w-[300px]" />
            </div>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Summary
            </Button>
          </div>
        </div>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>Introduction to Neural Networks</CardTitle>
              <CardDescription>Generated from PDF • 3 days ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                A comprehensive overview of neural network architecture and applications.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Share</Button>
              <Button>Read Summary</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>History of Computing</CardTitle>
              <CardDescription>Generated from YouTube • 1 week ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Evolution of computing from early mechanical devices to modern computers.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Share</Button>
              <Button>Read Summary</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Quantum Computing Basics</CardTitle>
              <CardDescription>Generated from PDF • 2 weeks ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Introduction to quantum bits, quantum gates, and quantum algorithms.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Share</Button>
              <Button>Read Summary</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Web Development Trends</CardTitle>
              <CardDescription>Generated from PDF • 3 weeks ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Current trends and future directions in web development technologies.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Share</Button>
              <Button>Read Summary</Button>
            </CardFooter>
          </Card>
          <Card>
            <CardHeader>
              <CardTitle>Artificial Intelligence Ethics</CardTitle>
              <CardDescription>Generated from YouTube • 1 month ago</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                Ethical considerations and challenges in AI development and deployment.
              </p>
            </CardContent>
            <CardFooter className="flex justify-between">
              <Button variant="outline">Share</Button>
              <Button>Read Summary</Button>
            </CardFooter>
          </Card>
          <Card className="flex flex-col items-center justify-center border-dashed p-8 text-center">
            <FileText className="h-10 w-10 text-muted-foreground mb-4" />
            <h3 className="font-medium mb-2">Create New Summary</h3>
            <p className="text-sm text-muted-foreground mb-4">Upload a document or add a YouTube link</p>
            <Button>
              <Plus className="mr-2 h-4 w-4" />
              New Summary
            </Button>
          </Card>
        </div>
      </DashboardShell>
    </div>
  )
}
</file>

<file path="app/workspace/loading.tsx">
import { Skeleton } from "@/components/ui/skeleton"

export default function Loading() {
  return (
    <div className="flex flex-col h-screen">
      <div className="h-14 border-b flex items-center px-4">
        <Skeleton className="h-6 w-24" />
        <div className="ml-auto flex items-center gap-2">
          <Skeleton className="h-8 w-8 rounded-full" />
          <Skeleton className="h-8 w-8 rounded-full" />
          <Skeleton className="h-8 w-8 rounded-full" />
        </div>
      </div>
      <div className="flex-1 flex">
        <div className="w-1/4 border-r p-4">
          <Skeleton className="h-8 w-full mb-4" />
          <div className="space-y-2">
            <Skeleton className="h-6 w-full" />
            <Skeleton className="h-6 w-full" />
            <Skeleton className="h-6 w-full" />
          </div>
        </div>
        <div className="w-2/4 p-4">
          <Skeleton className="h-8 w-full mb-4" />
          <div className="space-y-4">
            <div className="flex items-start gap-2">
              <Skeleton className="h-8 w-8 rounded-full" />
              <Skeleton className="h-20 w-3/4 rounded-lg" />
            </div>
            <div className="flex items-start gap-2 justify-end">
              <Skeleton className="h-16 w-2/3 rounded-lg" />
              <Skeleton className="h-8 w-8 rounded-full" />
            </div>
          </div>
        </div>
        <div className="w-1/4 border-l p-4">
          <Skeleton className="h-8 w-full mb-4" />
          <Skeleton className="h-40 w-full rounded-lg mb-4" />
          <div className="space-y-2">
            <Skeleton className="h-6 w-full" />
            <Skeleton className="h-6 w-full" />
            <Skeleton className="h-6 w-full" />
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="app/workspace/page.tsx">
import { WorkspaceHeader } from "@/components/workspace-header"
import { SourcesPanel } from "@/components/sources-panel"
import { ChatPanel } from "@/components/chat-panel"
import { StudioPanel } from "@/components/studio-panel"
import { ResizablePanelGroup, ResizablePanel } from "@/components/ui/resizable"

export default function WorkspacePage() {
  return (
    <div className="flex flex-col h-screen">
      <WorkspaceHeader />
      <div className="flex-1 overflow-hidden">
        <ResizablePanelGroup direction="horizontal" className="h-full">
          <ResizablePanel defaultSize={25} minSize={20} className="border-r">
            <SourcesPanel />
          </ResizablePanel>
          <ResizablePanel defaultSize={50} minSize={30}>
            <ChatPanel />
          </ResizablePanel>
          <ResizablePanel defaultSize={25} minSize={20} className="border-l">
            <StudioPanel />
          </ResizablePanel>
        </ResizablePanelGroup>
      </div>
    </div>
  )
}
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="components/avatar.tsx">
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="components/chat-panel.tsx">
"use client"

import type React from "react"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Brain, Send, User, Maximize2, Minimize2, FileText } from "lucide-react"

type Message = {
  id: number
  role: "user" | "assistant"
  content: string
  timestamp: Date
}

export function ChatPanel() {
  const [isExpanded, setIsExpanded] = useState(false)
  const [input, setInput] = useState("")
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      role: "assistant",
      content:
        "Hello! I'm Acharya, your AI learning assistant. I've analyzed your documents and I'm ready to help you learn. What would you like to know about the materials you've uploaded?",
      timestamp: new Date(),
    },
  ])

  const scrollAreaRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight
    }
  }, [messages])

  const handleSendMessage = () => {
    if (input.trim()) {
      // Add user message
      const userMessage: Message = {
        id: messages.length + 1,
        role: "user",
        content: input,
        timestamp: new Date(),
      }

      setMessages([...messages, userMessage])
      setInput("")

      // Simulate AI response after a short delay
      setTimeout(() => {
        const aiResponse: Message = {
          id: messages.length + 2,
          role: "assistant",
          content: getAIResponse(input),
          timestamp: new Date(),
        }

        setMessages((prev) => [...prev, aiResponse])
      }, 1000)
    }
  }

  const getAIResponse = (userInput: string): string => {
    const lowerInput = userInput.toLowerCase()

    if (lowerInput.includes("neural network") || lowerInput.includes("neural networks")) {
      return "Neural networks are computational models inspired by the human brain. They consist of layers of interconnected nodes or 'neurons' that process information and learn patterns from data through a process called training. Would you like me to explain more about specific types of neural networks or their applications?"
    } else if (lowerInput.includes("machine learning")) {
      return "Machine Learning is a subset of artificial intelligence that enables systems to learn and improve from experience without being explicitly programmed. It focuses on developing algorithms that can access data, learn from it, and make predictions or decisions. The uploaded documents cover various ML algorithms including supervised, unsupervised, and reinforcement learning approaches."
    } else if (lowerInput.includes("history") || lowerInput.includes("computing history")) {
      return "The history of computing spans from early mechanical calculators to modern quantum computers. Key milestones include the development of the first electronic general-purpose computer (ENIAC) in the 1940s, the invention of the transistor in 1947, the microprocessor in the 1970s, and the rise of personal computing in the 1980s. Would you like me to elaborate on a specific era or development?"
    } else if (lowerInput.includes("summary") || lowerInput.includes("summarize")) {
      return "I've analyzed your documents and here's a brief summary: The materials cover fundamental concepts in neural networks, machine learning basics, and the history of computing. The neural networks document explains network architecture, training methods, and applications. The machine learning document covers algorithms, data preprocessing, and evaluation metrics. The computing history video discusses the evolution from mechanical calculators to modern computers."
    } else {
      return "I'm here to help you understand the content in your uploaded materials. You can ask me specific questions about neural networks, machine learning basics, or the history of computing. I can also generate summaries, flashcards, or explain complex concepts in simpler terms."
    }
  }

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  return (
    <div className="flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b">
        <div className="flex items-center">
          <FileText className="h-5 w-5 mr-2 text-primary" />
          <h2 className="text-lg font-semibold">Chat with Acharya</h2>
        </div>
        <div className="flex items-center gap-1">
          <Button variant="ghost" size="icon" onClick={() => setIsExpanded(!isExpanded)}>
            {isExpanded ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
          </Button>
        </div>
      </div>
      <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
        <div className="space-y-4">
          {messages.map((message) => (
            <div key={message.id} className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}>
              <div className={`flex max-w-[80%] ${message.role === "user" ? "flex-row-reverse" : "flex-row"}`}>
                <div
                  className={`flex h-8 w-8 shrink-0 select-none items-center justify-center rounded-full ${
                    message.role === "user" ? "bg-primary ml-2" : "bg-muted mr-2"
                  }`}
                >
                  {message.role === "user" ? (
                    <User className="h-4 w-4 text-primary-foreground" />
                  ) : (
                    <Brain className="h-4 w-4 text-foreground" />
                  )}
                </div>
                <div
                  className={`rounded-lg px-4 py-2 ${
                    message.role === "user" ? "bg-primary text-primary-foreground" : "bg-muted"
                  }`}
                >
                  <p className="text-sm">{message.content}</p>
                  <p className="text-xs opacity-70 mt-1">
                    {message.timestamp.toLocaleTimeString([], {
                      hour: "2-digit",
                      minute: "2-digit",
                    })}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>
      <div className="p-4 border-t">
        <div className="flex items-center gap-2">
          <Input
            placeholder="Ask about your documents..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            className="flex-1"
          />
          <Button onClick={handleSendMessage} type="submit">
            <Send className="h-4 w-4" />
          </Button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root> & {
    indeterminate?: boolean
  }
>(({ className, indeterminate, checked, ...props }, ref) => {
  const checkboxRef = React.useRef<HTMLButtonElement>(null)

  React.useImperativeHandle(ref, () => checkboxRef.current as HTMLButtonElement)

  React.useEffect(() => {
    if (checkboxRef.current && typeof indeterminate === "boolean") {
      checkboxRef.current.dataset.indeterminate = indeterminate.toString()
    }
  }, [indeterminate])

  return (
    <CheckboxPrimitive.Root
      ref={checkboxRef}
      className={cn(
        "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[indeterminate=true]:bg-primary data-[indeterminate=true]:text-primary-foreground",
        className,
      )}
      checked={checked}
      {...props}
    >
      <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
        {indeterminate ? <div className="h-1 w-2 bg-current" /> : <CheckIcon className="h-4 w-4" />}
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
})
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="components/dashboard-shell.tsx">
import type React from "react"
interface DashboardShellProps {
  children: React.ReactNode
}

export function DashboardShell({ children }: DashboardShellProps) {
  return <div className="flex-1 space-y-4 p-8 pt-6">{children}</div>
}
</file>

<file path="components/interactive-flashcards.tsx">
"use client";

import { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { ArrowLeft, ArrowRight, Shuffle, RotateCcw, Loader2, AlertTriangle } from "lucide-react";
import { Progress } from "@/components/ui/progress";
import { parseFlashcardsFromText, formatFlashcardsWithGemini, Flashcard } from "@/lib/utils/flashcard-formatter";
import { Alert, AlertDescription } from "@/components/ui/alert";

// Helper function to shuffle an array
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

interface InteractiveFlashcardsProps {
  flashcardsText: string;
}

export function InteractiveFlashcards({ flashcardsText }: InteractiveFlashcardsProps) {
  const [parsedFlashcards, setParsedFlashcards] = useState<Flashcard[]>([]);
  const [cards, setCards] = useState<Flashcard[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);
  const [isShuffled, setIsShuffled] = useState(false);
  const [isLoading, setIsLoading] = useState(true); // Start with loading state
  const [error, setError] = useState<string | null>(null);
  const [formattedText, setFormattedText] = useState(flashcardsText);

  // Initial parsing of flashcards
  useEffect(() => {
    async function parseFlashcards() {
      try {
        setIsLoading(true);
        const initialParse = await parseFlashcardsFromText(flashcardsText);
        setParsedFlashcards(initialParse);
        setCards(initialParse);
        
        // If no cards were parsed, we'll try to reformat automatically
        if (initialParse.length === 0 && flashcardsText.trim().length > 0) {
          await handleReformatFlashcards();
        } else {
          setIsLoading(false);
        }
      } catch (err) {
        console.error("Error parsing flashcards:", err);
        setError("Failed to parse flashcards. Please try reformatting.");
        setIsLoading(false);
      }
    }
    
    parseFlashcards();
  }, [flashcardsText]);

  // Function to reformat flashcards using Gemini
  const handleReformatFlashcards = async () => {
    if (!flashcardsText.trim()) {
      setIsLoading(false);
      return;
    }
    
    setIsLoading(true);
    setError(null);
    
    try {
      // Call the server action to format the flashcards
      const formattedContent = await formatFlashcardsWithGemini(flashcardsText);
      setFormattedText(formattedContent);
      
      // Parse the newly formatted content
      const newFlashcards = await parseFlashcardsFromText(formattedContent);
      setParsedFlashcards(newFlashcards);
      setCards(newFlashcards);
      setCurrentIndex(0);
      setIsFlipped(false);
    } catch (err) {
      console.error("Error formatting flashcards:", err);
      setError("Failed to reformat flashcards. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center p-8 h-[300px] text-center">
        <Loader2 className="h-8 w-8 animate-spin text-primary mb-4" />
        <p className="font-medium">Processing flashcards...</p>
        <p className="text-xs text-muted-foreground mt-2">
          We're using AI to improve the structure of your flashcards.
        </p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-4">
        <Alert variant="destructive">
          <AlertTriangle className="h-4 w-4 mr-2" />
          <AlertDescription>{error}</AlertDescription>
        </Alert>
        <div className="mt-4 flex justify-center">
          <Button onClick={handleReformatFlashcards}>Try Again</Button>
        </div>
      </div>
    );
  }

  if (cards.length === 0) {
    return (
      <div className="text-center p-6 bg-muted/20 rounded-lg border border-dashed border-muted-foreground/30">
        <p className="text-muted-foreground mb-4">No flashcards found or invalid format.</p>
        <Button onClick={handleReformatFlashcards} className="mb-3">
          Reformat with AI
        </Button>
        <p className="text-xs text-muted-foreground">
          Click the button above to use AI to convert this content into properly formatted flashcards.
        </p>
      </div>
    );
  }

  const currentCard = cards[currentIndex];
  const totalCards = cards.length;
  const progress = ((currentIndex + 1) / totalCards) * 100;

  const handleFlip = () => {
    setIsFlipped(!isFlipped);
  };

  const handleNext = () => {
    if (currentIndex < totalCards - 1) {
      setCurrentIndex(currentIndex + 1);
      setIsFlipped(false);
    }
  };

  const handlePrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
      setIsFlipped(false);
    }
  };

  const handleShuffle = () => {
    setCards(shuffleArray(cards));
    setCurrentIndex(0);
    setIsFlipped(false);
    setIsShuffled(true);
  };

  const handleReset = () => {
    setCards(parsedFlashcards);
    setCurrentIndex(0);
    setIsFlipped(false);
    setIsShuffled(false);
  };

  return (
    <div className="w-full p-4 flex flex-col min-h-[400px]">
      {/* Header with controls and progress */}
      <div className="mb-4 flex flex-col space-y-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold bg-primary/10 text-primary">
              {currentIndex + 1}/{totalCards}
            </div>
            {isShuffled && (
              <div className="inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold bg-secondary text-secondary-foreground">
                <Shuffle className="h-3 w-3 mr-1" />
                Shuffled
              </div>
            )}
          </div>
          <div className="flex items-center gap-2">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleShuffle} 
              className="h-8 text-xs"
            >
              <Shuffle className="mr-1 h-3 w-3" />
              Shuffle
            </Button>
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleReset} 
              className="h-8 text-xs"
              disabled={!isShuffled}
            >
              <RotateCcw className="mr-1 h-3 w-3" />
              Reset
            </Button>
          </div>
        </div>
        <Progress value={progress} className="h-1.5" />
      </div>

      {/* Flashcard - Using flex-grow to push navigation to bottom */}
      <div className="flex-grow mb-6">
        <div
          className="w-full perspective cursor-pointer h-[250px]"
          onClick={handleFlip}
        >
          <div
            className={`relative preserve-3d transition-transform duration-500 h-full ${isFlipped ? 'rotate-y-180' : ''}`}
            style={{ transformStyle: 'preserve-3d' }}
          >
            {/* Front of Card (Question) */}
            <div 
              className="absolute inset-0 w-full h-full"
              style={{ backfaceVisibility: 'hidden' }}
            >
              <Card className="w-full h-full shadow-sm hover:shadow transition-shadow border-primary/10">
                <CardContent className="flex flex-col items-center justify-center h-full p-6 text-center">
                  <div className="absolute top-3 right-3 inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-medium bg-background">
                    Question
                  </div>
                  <div className="max-w-md">
                    <h3 className="text-xl font-bold mb-4">{currentCard.question}</h3>
                    {!isFlipped && (
                      <div className="absolute bottom-4 left-0 right-0 text-center">
                        <p className="text-sm text-muted-foreground flex items-center justify-center">
                          <span className="inline-block animate-bounce mr-1">👆</span> 
                          Tap to reveal answer
                        </p>
                      </div>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
            
            {/* Back of Card (Answer) */}
            <div 
              className="absolute inset-0 w-full h-full"
              style={{ 
                backfaceVisibility: 'hidden',
                transform: 'rotateY(180deg)'
              }}
            >
              <Card className="w-full h-full shadow-sm hover:shadow transition-shadow border-primary/10">
                <CardContent className="flex flex-col items-center justify-center h-full p-6 text-center">
                  <div className="absolute top-3 right-3 inline-flex items-center rounded-md border px-2 py-0.5 text-xs font-medium bg-background">
                    Answer
                  </div>
                  <div className="max-w-md overflow-y-auto max-h-[180px] scrollbar-thin">
                    <p className="text-lg">{currentCard.answer}</p>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation buttons - Fixed at bottom */}
      <div className="flex justify-center gap-3 mt-auto">
        <Button 
          variant={currentIndex === 0 ? "secondary" : "default"}
          onClick={handlePrevious} 
          disabled={currentIndex === 0}
          className="w-32 gap-1"
        >
          <ArrowLeft className="h-4 w-4" />
          Previous
        </Button>
        <Button 
          variant={currentIndex === totalCards - 1 ? "secondary" : "default"}
          onClick={handleNext} 
          disabled={currentIndex === totalCards - 1}
          className="w-32 gap-1"
        >
          Next
          <ArrowRight className="h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}
</file>

<file path="components/overview.tsx">
"use client"

import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip } from "recharts"

const data = [
  {
    name: "Mon",
    flashcards: 12,
    summaries: 5,
    podcasts: 2,
  },
  {
    name: "Tue",
    flashcards: 18,
    summaries: 8,
    podcasts: 3,
  },
  {
    name: "Wed",
    flashcards: 15,
    summaries: 6,
    podcasts: 4,
  },
  {
    name: "Thu",
    flashcards: 25,
    summaries: 10,
    podcasts: 5,
  },
  {
    name: "Fri",
    flashcards: 20,
    summaries: 12,
    podcasts: 6,
  },
  {
    name: "Sat",
    flashcards: 10,
    summaries: 4,
    podcasts: 2,
  },
  {
    name: "Sun",
    flashcards: 5,
    summaries: 2,
    podcasts: 1,
  },
]

export function Overview() {
  return (
    <div className="h-[300px] w-full">
      <ResponsiveContainer width="100%" height="100%">
        <BarChart data={data}>
          <XAxis dataKey="name" stroke="#888888" fontSize={12} tickLine={false} axisLine={false} />
          <YAxis stroke="#888888" fontSize={12} tickLine={false} axisLine={false} />
          <Tooltip />
          <Bar dataKey="flashcards" fill="currentColor" radius={[4, 4, 0, 0]} className="fill-primary" />
          <Bar dataKey="summaries" fill="currentColor" radius={[4, 4, 0, 0]} className="fill-purple-500" />
          <Bar dataKey="podcasts" fill="currentColor" radius={[4, 4, 0, 0]} className="fill-green-500" />
        </BarChart>
      </ResponsiveContainer>
    </div>
  )
}
</file>

<file path="components/recent-uploads.tsx">
import { FileText, Youtube, Clock, MoreHorizontal } from "lucide-react"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function RecentUploads() {
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between p-4 border rounded-lg">
        <div className="flex items-center gap-4">
          <div className="flex h-10 w-10 items-center justify-center rounded-full bg-primary/10">
            <FileText className="h-5 w-5 text-primary" />
          </div>
          <div>
            <p className="text-sm font-medium">Machine Learning Basics.pdf</p>
            <p className="text-xs text-muted-foreground">Uploaded 3 days ago</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-1 text-xs text-muted-foreground">
            <Clock className="h-3 w-3" />
            <span>Processing complete</span>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <MoreHorizontal className="h-4 w-4" />
                <span className="sr-only">More</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>View</DropdownMenuItem>
              <DropdownMenuItem>Generate Flashcards</DropdownMenuItem>
              <DropdownMenuItem>Generate Summary</DropdownMenuItem>
              <DropdownMenuItem>Generate Podcast</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div className="flex items-center justify-between p-4 border rounded-lg">
        <div className="flex items-center gap-4">
          <div className="flex h-10 w-10 items-center justify-center rounded-full bg-primary/10">
            <Youtube className="h-5 w-5 text-primary" />
          </div>
          <div>
            <p className="text-sm font-medium">History of Computing</p>
            <p className="text-xs text-muted-foreground">YouTube • Added 1 week ago</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-1 text-xs text-muted-foreground">
            <Clock className="h-3 w-3" />
            <span>Processing complete</span>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <MoreHorizontal className="h-4 w-4" />
                <span className="sr-only">More</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>View</DropdownMenuItem>
              <DropdownMenuItem>Generate Flashcards</DropdownMenuItem>
              <DropdownMenuItem>Generate Summary</DropdownMenuItem>
              <DropdownMenuItem>Generate Podcast</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div className="flex items-center justify-between p-4 border rounded-lg">
        <div className="flex items-center gap-4">
          <div className="flex h-10 w-10 items-center justify-center rounded-full bg-primary/10">
            <FileText className="h-5 w-5 text-primary" />
          </div>
          <div>
            <p className="text-sm font-medium">Data Structures.pdf</p>
            <p className="text-xs text-muted-foreground">Uploaded 2 weeks ago</p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <div className="flex items-center gap-1 text-xs text-muted-foreground">
            <Clock className="h-3 w-3" />
            <span>Processing complete</span>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <MoreHorizontal className="h-4 w-4" />
                <span className="sr-only">More</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>View</DropdownMenuItem>
              <DropdownMenuItem>Generate Flashcards</DropdownMenuItem>
              <DropdownMenuItem>Generate Summary</DropdownMenuItem>
              <DropdownMenuItem>Generate Podcast</DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>Delete</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/resizable.tsx">
"use client"

import * as React from "react"
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = React.forwardRef<
  React.ElementRef<typeof ResizablePrimitive.PanelGroup>,
  React.ComponentPropsWithoutRef<typeof ResizablePrimitive.PanelGroup>
>(({ className, ...props }, ref) => (
  <ResizablePrimitive.PanelGroup
    ref={ref}
    className={cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)}
    {...props}
  />
))
ResizablePanelGroup.displayName = "ResizablePanelGroup"

const ResizablePanel = React.forwardRef<
  React.ElementRef<typeof ResizablePrimitive.Panel>,
  React.ComponentPropsWithoutRef<typeof ResizablePrimitive.Panel>
>(({ className, ...props }, ref) => (
  <ResizablePrimitive.Panel ref={ref} className={cn("relative flex h-full w-full flex-col", className)} {...props} />
))
ResizablePanel.displayName = "ResizablePanel"

const ResizableHandle = React.forwardRef<
  React.ElementRef<typeof ResizablePrimitive.PanelResizeHandle>,
  React.ComponentPropsWithoutRef<typeof ResizablePrimitive.PanelResizeHandle> & {
    withHandle?: boolean
  }
>(({ className, withHandle, ...props }, ref) => (
  <ResizablePrimitive.PanelResizeHandle
    ref={ref}
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
))
ResizableHandle.displayName = "ResizableHandle"

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="components/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root> & {
    ref?: React.Ref<HTMLDivElement>
  }
>(({ className, children, ...props }, forwardedRef) => {
  const scrollAreaRef = React.useRef<HTMLDivElement>(null)

  React.useImperativeHandle(forwardedRef, () => scrollAreaRef.current as HTMLDivElement)

  return (
    <ScrollAreaPrimitive.Root className={cn("relative overflow-hidden", className)} {...props}>
      <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]" ref={scrollAreaRef}>
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
})
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="components/sessions-list.tsx">
import { auth } from "@clerk/nextjs/server";
import { db } from "@/db";
import { sessions } from "@/db/schema";
import { eq, desc } from "drizzle-orm";
import { SessionsListClient } from "./sessions-list-client";

export default async function SessionsList() {
  const session = await auth();
  
  if (!session?.userId) {
    return null;
  }

  try {
    console.log("Fetching sessions for user:", session.userId);

    const userSessions = await db
      .select()
      .from(sessions)
      .where(eq(sessions.userId, session.userId))
      .orderBy(desc(sessions.createdAt));

    console.log("Found sessions:", userSessions);

    return <SessionsListClient sessions={userSessions} />;
  } catch (error) {
    console.error("Error in SessionsList:", error);
    return null;
  }
}
</file>

<file path="components/shell.tsx">
import { WorkspaceHeader } from "./workspace-header";

interface DashboardShellProps {
  children: React.ReactNode;
}

export function DashboardShell({ children }: DashboardShellProps) {
  return (
    <div className="flex min-h-screen flex-col">
      <WorkspaceHeader />
      <main className="flex-1">{children}</main>
    </div>
  );
}
</file>

<file path="components/skeleton.tsx">
import type React from "react"
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("animate-pulse rounded-md bg-muted", className)} {...props} />
}

export { Skeleton }
</file>

<file path="components/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="components/sources-panel.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { FileText, Plus, Youtube, File, Maximize2, Minimize2 } from "lucide-react"
import { ScrollArea } from "@/components/ui/scroll-area"

export function SourcesPanel() {
  const [isExpanded, setIsExpanded] = useState(false)
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false)
  const [sources, setSources] = useState([
    { id: 1, name: "Introduction to Neural Networks.pdf", type: "pdf", selected: false },
    { id: 2, name: "Machine Learning Basics.pdf", type: "pdf", selected: false },
    { id: 3, name: "History of Computing", type: "youtube", selected: false },
  ])

  const toggleSourceSelection = (id: number) => {
    setSources(sources.map((source) => (source.id === id ? { ...source, selected: !source.selected } : source)))
  }

  const toggleAllSources = (selected: boolean) => {
    setSources(sources.map((source) => ({ ...source, selected })))
  }

  const areAllSourcesSelected = sources.every((source) => source.selected)
  const areSomeSourcesSelected = sources.some((source) => source.selected) && !areAllSourcesSelected

  return (
    <div className="flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b">
        <h2 className="text-lg font-semibold">Sources</h2>
        <div className="flex items-center gap-1">
          <Button variant="ghost" size="icon" onClick={() => setIsExpanded(!isExpanded)}>
            {isExpanded ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
          </Button>
        </div>
      </div>
      <div className="p-4">
        <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>
          <DialogTrigger asChild>
            <Button className="w-full">
              <Plus className="mr-2 h-4 w-4" />
              Add
            </Button>
          </DialogTrigger>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Add Learning Material</DialogTitle>
              <DialogDescription>
                Upload a document or add a YouTube video link to generate learning materials.
              </DialogDescription>
            </DialogHeader>
            <Tabs defaultValue="file" className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="file">Upload File</TabsTrigger>
                <TabsTrigger value="youtube">YouTube Link</TabsTrigger>
              </TabsList>
              <TabsContent value="file" className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="file">Document</Label>
                  <Input id="file" type="file" accept=".pdf,.doc,.docx,.txt" />
                  <p className="text-xs text-muted-foreground">Supported formats: PDF, DOC, DOCX, TXT</p>
                </div>
                <DialogFooter>
                  <Button type="submit" onClick={() => setIsUploadDialogOpen(false)}>
                    Upload & Process
                  </Button>
                </DialogFooter>
              </TabsContent>
              <TabsContent value="youtube" className="space-y-4 py-4">
                <div className="space-y-2">
                  <Label htmlFor="youtube">YouTube URL</Label>
                  <Input id="youtube" placeholder="https://www.youtube.com/watch?v=..." />
                  <p className="text-xs text-muted-foreground">Paste a valid YouTube video URL</p>
                </div>
                <DialogFooter>
                  <Button type="submit" onClick={() => setIsUploadDialogOpen(false)}>
                    Add & Process
                  </Button>
                </DialogFooter>
              </TabsContent>
            </Tabs>
          </DialogContent>
        </Dialog>
      </div>
      <div className="px-4 py-2 border-b">
        <div className="flex items-center">
          <Checkbox
            id="select-all"
            checked={areAllSourcesSelected}
            indeterminate={areSomeSourcesSelected}
            onCheckedChange={(checked) => toggleAllSources(!!checked)}
          />
          <Label htmlFor="select-all" className="ml-2 text-sm">
            Select all sources
          </Label>
        </div>
      </div>
      <ScrollArea className="flex-1">
        <div className="p-4 space-y-2">
          {sources.map((source) => (
            <div
              key={source.id}
              className="flex items-center p-2 rounded-md hover:bg-muted/50 cursor-pointer"
              onClick={() => toggleSourceSelection(source.id)}
            >
              <Checkbox
                id={`source-${source.id}`}
                checked={source.selected}
                onCheckedChange={() => toggleSourceSelection(source.id)}
                onClick={(e) => e.stopPropagation()}
              />
              <div className="ml-2 flex items-center">
                {source.type === "pdf" ? (
                  <FileText className="h-4 w-4 text-red-500 mr-2" />
                ) : (
                  <Youtube className="h-4 w-4 text-red-500 mr-2" />
                )}
                <Label htmlFor={`source-${source.id}`} className="text-sm cursor-pointer">
                  {source.name}
                </Label>
              </div>
            </div>
          ))}
        </div>
      </ScrollArea>
      <div className="p-4 border-t">
        <div className="flex flex-col space-y-2">
          <Button variant="outline" size="sm" disabled={!areSomeSourcesSelected && !areAllSourcesSelected}>
            <File className="mr-2 h-4 w-4" />
            Generate Flashcards
          </Button>
          <Button variant="outline" size="sm" disabled={!areSomeSourcesSelected && !areAllSourcesSelected}>
            <File className="mr-2 h-4 w-4" />
            Generate Summary
          </Button>
          <Button variant="outline" size="sm" disabled={!areSomeSourcesSelected && !areAllSourcesSelected}>
            <File className="mr-2 h-4 w-4" />
            Generate Podcast
          </Button>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="components/studio-panel.tsx">
"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Slider } from "@/components/ui/slider"
import {
  Headphones,
  Play,
  Pause,
  SkipBack,
  SkipForward,
  Volume2,
  Info,
  Maximize2,
  Minimize2,
  FileText,
  BookOpen,
  Plus,
} from "lucide-react"

export function StudioPanel() {
  const [isExpanded, setIsExpanded] = useState(false)
  const [isPlaying, setIsPlaying] = useState(false)
  const [volume, setVolume] = useState([70])
  const [progress, setProgress] = useState([30])

  return (
    <div className="flex flex-col h-full">
      <div className="flex items-center justify-between p-4 border-b">
        <h2 className="text-lg font-semibold">Studio</h2>
        <div className="flex items-center gap-1">
          <Button variant="ghost" size="icon" onClick={() => setIsExpanded(!isExpanded)}>
            {isExpanded ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
          </Button>
        </div>
      </div>

      <Tabs defaultValue="audio" className="flex-1 flex flex-col">
        <div className="px-4 pt-4">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="audio">Audio</TabsTrigger>
            <TabsTrigger value="notes">Notes</TabsTrigger>
          </TabsList>
        </div>

        <TabsContent value="audio" className="flex-1 flex flex-col">
          <div className="p-4 border-b">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Audio Overview</h3>
              <Button variant="ghost" size="icon">
                <Info className="h-4 w-4" />
              </Button>
            </div>
          </div>

          <ScrollArea className="flex-1">
            <div className="p-4 space-y-4">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-base">Deep Dive Conversation</CardTitle>
                  <CardDescription>Two hosts (English only)</CardDescription>
                </CardHeader>
                <CardContent className="pb-2">
                  <div className="flex flex-col items-center">
                    <div className="w-24 h-24 bg-gradient-to-br from-primary/20 to-purple-500/20 rounded-lg flex items-center justify-center mb-4">
                      <Headphones className="h-12 w-12 text-primary/60" />
                    </div>

                    <div className="w-full">
                      <div className="flex items-center justify-between mb-1">
                        <span className="text-xs text-muted-foreground">4:15</span>
                        <span className="text-xs text-muted-foreground">15:30</span>
                      </div>
                      <Slider value={progress} max={100} step={1} className="mb-4" onValueChange={setProgress} />

                      <div className="flex items-center justify-center gap-2">
                        <Button variant="outline" size="icon" className="h-8 w-8 rounded-full">
                          <SkipBack className="h-3 w-3" />
                        </Button>
                        <Button size="icon" className="h-10 w-10 rounded-full" onClick={() => setIsPlaying(!isPlaying)}>
                          {isPlaying ? <Pause className="h-4 w-4" /> : <Play className="h-4 w-4" />}
                        </Button>
                        <Button variant="outline" size="icon" className="h-8 w-8 rounded-full">
                          <SkipForward className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  </div>
                </CardContent>
                <CardFooter className="pt-0">
                  <div className="flex items-center w-full gap-2">
                    <Volume2 className="h-3 w-3 text-muted-foreground" />
                    <Slider value={volume} max={100} step={1} className="flex-1" onValueChange={setVolume} />
                  </div>
                </CardFooter>
              </Card>

              <div className="space-y-2">
                <h3 className="text-sm font-medium">Available Podcasts</h3>
                <div className="space-y-2">
                  <Card className="cursor-pointer hover:bg-muted/50">
                    <CardHeader className="p-3">
                      <CardTitle className="text-sm">Neural Networks Explained</CardTitle>
                      <CardDescription className="text-xs">12:45 • Generated from PDF</CardDescription>
                    </CardHeader>
                  </Card>
                  <Card className="cursor-pointer hover:bg-muted/50">
                    <CardHeader className="p-3">
                      <CardTitle className="text-sm">History of Computing</CardTitle>
                      <CardDescription className="text-xs">15:30 • Generated from YouTube</CardDescription>
                    </CardHeader>
                  </Card>
                  <Card className="cursor-pointer hover:bg-muted/50">
                    <CardHeader className="p-3">
                      <CardTitle className="text-sm">Machine Learning Basics</CardTitle>
                      <CardDescription className="text-xs">10:15 • Generated from PDF</CardDescription>
                    </CardHeader>
                  </Card>
                </div>
              </div>

              <Button className="w-full">
                <Plus className="mr-2 h-4 w-4" />
                Generate New Podcast
              </Button>
            </div>
          </ScrollArea>
        </TabsContent>

        <TabsContent value="notes" className="flex-1 flex flex-col">
          <div className="p-4 border-b">
            <div className="flex items-center justify-between">
              <h3 className="text-sm font-medium">Notes</h3>
              <Button variant="outline" size="sm">
                <Plus className="mr-2 h-3 w-3" />
                Add note
              </Button>
            </div>
          </div>

          <ScrollArea className="flex-1">
            <div className="p-4 space-y-4">
              <div className="grid grid-cols-2 gap-2">
                <Button variant="outline" className="justify-start h-auto py-2 px-3">
                  <BookOpen className="h-4 w-4 mr-2" />
                  <div className="text-left">
                    <span className="text-xs block">Study guide</span>
                  </div>
                </Button>
                <Button variant="outline" className="justify-start h-auto py-2 px-3">
                  <FileText className="h-4 w-4 mr-2" />
                  <div className="text-left">
                    <span className="text-xs block">Briefing doc</span>
                  </div>
                </Button>
                <Button variant="outline" className="justify-start h-auto py-2 px-3">
                  <FileText className="h-4 w-4 mr-2" />
                  <div className="text-left">
                    <span className="text-xs block">FAQ</span>
                  </div>
                </Button>
                <Button variant="outline" className="justify-start h-auto py-2 px-3">
                  <FileText className="h-4 w-4 mr-2" />
                  <div className="text-left">
                    <span className="text-xs block">Timeline</span>
                  </div>
                </Button>
              </div>

              <div className="space-y-2">
                <h3 className="text-sm font-medium">Your Notes</h3>
                <Card>
                  <CardHeader className="p-3 pb-1">
                    <CardTitle className="text-sm">Neural Network Types</CardTitle>
                    <CardDescription className="text-xs">Created 2 days ago</CardDescription>
                  </CardHeader>
                  <CardContent className="p-3 pt-0">
                    <p className="text-xs text-muted-foreground">
                      CNN: Good for images, RNN: Good for sequences, LSTM: Better for long sequences...
                    </p>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader className="p-3 pb-1">
                    <CardTitle className="text-sm">Machine Learning Algorithms</CardTitle>
                    <CardDescription className="text-xs">Created 3 days ago</CardDescription>
                  </CardHeader>
                  <CardContent className="p-3 pt-0">
                    <p className="text-xs text-muted-foreground">
                      Supervised: Classification, Regression. Unsupervised: Clustering...
                    </p>
                  </CardContent>
                </Card>
              </div>
            </div>
          </ScrollArea>
        </TabsContent>
      </Tabs>
    </div>
  )
}
</file>

<file path="components/theme-provider.tsx">
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}
</file>

<file path="components/theme-toggle.tsx">
"use client"
import { Moon, Sun } from "lucide-react"
import { useTheme } from "next-themes"

import { Button } from "@/components/ui/button"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"

export function ThemeToggle() {
  const { theme, setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>Light</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>Dark</DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>System</DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
</file>

<file path="components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm grid has-[>svg]:grid-cols-[calc(var(--spacing)*4)_1fr] grid-cols-[0_1fr] has-[>svg]:gap-x-3 gap-y-0.5 items-start [&>svg]:size-4 [&>svg]:translate-y-0.5 [&>svg]:text-current",
  {
    variants: {
      variant: {
        default: "bg-card text-card-foreground",
        destructive:
          "text-destructive bg-card [&>svg]:text-current *:data-[slot=alert-description]:text-destructive/90",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Alert({
  className,
  variant,
  ...props
}: React.ComponentProps<"div"> & VariantProps<typeof alertVariants>) {
  return (
    <div
      data-slot="alert"
      role="alert"
      className={cn(alertVariants({ variant }), className)}
      {...props}
    />
  )
}

function AlertTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-title"
      className={cn(
        "col-start-2 line-clamp-1 min-h-4 font-medium tracking-tight",
        className
      )}
      {...props}
    />
  )
}

function AlertDescription({
  className,
  ...props
}: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="alert-description"
      className={cn(
        "text-muted-foreground col-start-2 grid justify-items-start gap-1 text-sm [&_p]:leading-relaxed",
        className
      )}
      {...props}
    />
  )
}

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  )
}

export { Button, buttonVariants }
</file>

<file path="components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Card({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card"
      className={cn(
        "bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm",
        className
      )}
      {...props}
    />
  )
}

function CardHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-header"
      className={cn(
        "@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6",
        className
      )}
      {...props}
    />
  )
}

function CardTitle({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-title"
      className={cn("leading-none font-semibold", className)}
      {...props}
    />
  )
}

function CardDescription({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

function CardAction({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-action"
      className={cn(
        "col-start-2 row-span-2 row-start-1 self-start justify-self-end",
        className
      )}
      {...props}
    />
  )
}

function CardContent({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-content"
      className={cn("px-6", className)}
      {...props}
    />
  )
}

function CardFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="card-footer"
      className={cn("flex items-center px-6 [.border-t]:pt-6", className)}
      {...props}
    />
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</file>

<file path="components/ui/checkbox.tsx">
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { CheckIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Checkbox({
  className,
  ...props
}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {
  return (
    <CheckboxPrimitive.Root
      data-slot="checkbox"
      className={cn(
        "peer border-input dark:bg-input/30 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground dark:data-[state=checked]:bg-primary data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <CheckboxPrimitive.Indicator
        data-slot="checkbox-indicator"
        className="flex items-center justify-center text-current transition-none"
      >
        <CheckIcon className="size-3.5" />
      </CheckboxPrimitive.Indicator>
    </CheckboxPrimitive.Root>
  )
}

export { Checkbox }
</file>

<file path="components/ui/dialog.tsx">
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { XIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function Dialog({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Root>) {
  return <DialogPrimitive.Root data-slot="dialog" {...props} />
}

function DialogTrigger({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Trigger>) {
  return <DialogPrimitive.Trigger data-slot="dialog-trigger" {...props} />
}

function DialogPortal({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Portal>) {
  return <DialogPrimitive.Portal data-slot="dialog-portal" {...props} />
}

function DialogClose({
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Close>) {
  return <DialogPrimitive.Close data-slot="dialog-close" {...props} />
}

function DialogOverlay({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Overlay>) {
  return (
    <DialogPrimitive.Overlay
      data-slot="dialog-overlay"
      className={cn(
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 fixed inset-0 z-50 bg-black/50",
        className
      )}
      {...props}
    />
  )
}

function DialogContent({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Content>) {
  return (
    <DialogPortal data-slot="dialog-portal">
      <DialogOverlay />
      <DialogPrimitive.Content
        data-slot="dialog-content"
        className={cn(
          "bg-background data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 fixed top-[50%] left-[50%] z-50 grid w-full max-w-[calc(100%-2rem)] translate-x-[-50%] translate-y-[-50%] gap-4 rounded-lg border p-6 shadow-lg duration-200 sm:max-w-lg",
          className
        )}
        {...props}
      >
        {children}
        <DialogPrimitive.Close className="ring-offset-background focus:ring-ring data-[state=open]:bg-accent data-[state=open]:text-muted-foreground absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden disabled:pointer-events-none [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4">
          <XIcon />
          <span className="sr-only">Close</span>
        </DialogPrimitive.Close>
      </DialogPrimitive.Content>
    </DialogPortal>
  )
}

function DialogHeader({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-header"
      className={cn("flex flex-col gap-2 text-center sm:text-left", className)}
      {...props}
    />
  )
}

function DialogFooter({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="dialog-footer"
      className={cn(
        "flex flex-col-reverse gap-2 sm:flex-row sm:justify-end",
        className
      )}
      {...props}
    />
  )
}

function DialogTitle({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Title>) {
  return (
    <DialogPrimitive.Title
      data-slot="dialog-title"
      className={cn("text-lg leading-none font-semibold", className)}
      {...props}
    />
  )
}

function DialogDescription({
  className,
  ...props
}: React.ComponentProps<typeof DialogPrimitive.Description>) {
  return (
    <DialogPrimitive.Description
      data-slot="dialog-description"
      className={cn("text-muted-foreground text-sm", className)}
      {...props}
    />
  )
}

export {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
}
</file>

<file path="components/ui/dropdown-menu.tsx">
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}
</file>

<file path="components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }
</file>

<file path="components/ui/label.tsx">
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"

import { cn } from "@/lib/utils"

function Label({
  className,
  ...props
}: React.ComponentProps<typeof LabelPrimitive.Root>) {
  return (
    <LabelPrimitive.Root
      data-slot="label"
      className={cn(
        "flex items-center gap-2 text-sm leading-none font-medium select-none group-data-[disabled=true]:pointer-events-none group-data-[disabled=true]:opacity-50 peer-disabled:cursor-not-allowed peer-disabled:opacity-50",
        className
      )}
      {...props}
    />
  )
}

export { Label }
</file>

<file path="components/ui/progress.tsx">
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps<typeof ProgressPrimitive.Root>) {
  return (
    <ProgressPrimitive.Root
      data-slot="progress"
      className={cn(
        "bg-primary/20 relative h-2 w-full overflow-hidden rounded-full",
        className
      )}
      {...props}
    >
      <ProgressPrimitive.Indicator
        data-slot="progress-indicator"
        className="bg-primary h-full w-full flex-1 transition-all"
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      />
    </ProgressPrimitive.Root>
  )
}

export { Progress }
</file>

<file path="components/ui/resizable.tsx">
"use client"

import * as React from "react"
import { GripVerticalIcon } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

function ResizablePanelGroup({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) {
  return (
    <ResizablePrimitive.PanelGroup
      data-slot="resizable-panel-group"
      className={cn(
        "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
        className
      )}
      {...props}
    />
  )
}

function ResizablePanel({
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.Panel>) {
  return <ResizablePrimitive.Panel data-slot="resizable-panel" {...props} />
}

function ResizableHandle({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) {
  return (
    <ResizablePrimitive.PanelResizeHandle
      data-slot="resizable-handle"
      className={cn(
        "bg-border focus-visible:ring-ring relative flex w-px items-center justify-center after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:ring-1 focus-visible:ring-offset-1 focus-visible:outline-hidden data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
        className
      )}
      {...props}
    >
      {withHandle && (
        <div className="bg-border z-10 flex h-4 w-3 items-center justify-center rounded-xs border">
          <GripVerticalIcon className="size-2.5" />
        </div>
      )}
    </ResizablePrimitive.PanelResizeHandle>
  )
}

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="components/ui/scroll-area.tsx">
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

function ScrollArea({
  className,
  children,
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.Root>) {
  return (
    <ScrollAreaPrimitive.Root
      data-slot="scroll-area"
      className={cn("relative", className)}
      {...props}
    >
      <ScrollAreaPrimitive.Viewport
        data-slot="scroll-area-viewport"
        className="focus-visible:ring-ring/50 size-full rounded-[inherit] transition-[color,box-shadow] outline-none focus-visible:ring-[3px] focus-visible:outline-1"
      >
        {children}
      </ScrollAreaPrimitive.Viewport>
      <ScrollBar />
      <ScrollAreaPrimitive.Corner />
    </ScrollAreaPrimitive.Root>
  )
}

function ScrollBar({
  className,
  orientation = "vertical",
  ...props
}: React.ComponentProps<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>) {
  return (
    <ScrollAreaPrimitive.ScrollAreaScrollbar
      data-slot="scroll-area-scrollbar"
      orientation={orientation}
      className={cn(
        "flex touch-none p-px transition-colors select-none",
        orientation === "vertical" &&
          "h-full w-2.5 border-l border-l-transparent",
        orientation === "horizontal" &&
          "h-2.5 flex-col border-t border-t-transparent",
        className
      )}
      {...props}
    >
      <ScrollAreaPrimitive.ScrollAreaThumb
        data-slot="scroll-area-thumb"
        className="bg-border relative flex-1 rounded-full"
      />
    </ScrollAreaPrimitive.ScrollAreaScrollbar>
  )
}

export { ScrollArea, ScrollBar }
</file>

<file path="components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({ className, ...props }: React.ComponentProps<"div">) {
  return (
    <div
      data-slot="skeleton"
      className={cn("bg-accent animate-pulse rounded-md", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="components/ui/slider.tsx">
"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

function Slider({
  className,
  defaultValue,
  value,
  min = 0,
  max = 100,
  ...props
}: React.ComponentProps<typeof SliderPrimitive.Root>) {
  const _values = React.useMemo(
    () =>
      Array.isArray(value)
        ? value
        : Array.isArray(defaultValue)
          ? defaultValue
          : [min, max],
    [value, defaultValue, min, max]
  )

  return (
    <SliderPrimitive.Root
      data-slot="slider"
      defaultValue={defaultValue}
      value={value}
      min={min}
      max={max}
      className={cn(
        "relative flex w-full touch-none items-center select-none data-[disabled]:opacity-50 data-[orientation=vertical]:h-full data-[orientation=vertical]:min-h-44 data-[orientation=vertical]:w-auto data-[orientation=vertical]:flex-col",
        className
      )}
      {...props}
    >
      <SliderPrimitive.Track
        data-slot="slider-track"
        className={cn(
          "bg-muted relative grow overflow-hidden rounded-full data-[orientation=horizontal]:h-1.5 data-[orientation=horizontal]:w-full data-[orientation=vertical]:h-full data-[orientation=vertical]:w-1.5"
        )}
      >
        <SliderPrimitive.Range
          data-slot="slider-range"
          className={cn(
            "bg-primary absolute data-[orientation=horizontal]:h-full data-[orientation=vertical]:w-full"
          )}
        />
      </SliderPrimitive.Track>
      {Array.from({ length: _values.length }, (_, index) => (
        <SliderPrimitive.Thumb
          data-slot="slider-thumb"
          key={index}
          className="border-primary bg-background ring-ring/50 block size-4 shrink-0 rounded-full border shadow-sm transition-[color,box-shadow] hover:ring-4 focus-visible:ring-4 focus-visible:outline-hidden disabled:pointer-events-none disabled:opacity-50"
        />
      ))}
    </SliderPrimitive.Root>
  )
}

export { Slider }
</file>

<file path="components/ui/tabs.tsx">
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

function Tabs({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Root>) {
  return (
    <TabsPrimitive.Root
      data-slot="tabs"
      className={cn("flex flex-col gap-2", className)}
      {...props}
    />
  )
}

function TabsList({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.List>) {
  return (
    <TabsPrimitive.List
      data-slot="tabs-list"
      className={cn(
        "bg-muted text-muted-foreground inline-flex h-9 w-fit items-center justify-center rounded-lg p-[3px]",
        className
      )}
      {...props}
    />
  )
}

function TabsTrigger({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Trigger>) {
  return (
    <TabsPrimitive.Trigger
      data-slot="tabs-trigger"
      className={cn(
        "data-[state=active]:bg-background dark:data-[state=active]:text-foreground focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:outline-ring dark:data-[state=active]:border-input dark:data-[state=active]:bg-input/30 text-foreground dark:text-muted-foreground inline-flex h-[calc(100%-1px)] flex-1 items-center justify-center gap-1.5 rounded-md border border-transparent px-2 py-1 text-sm font-medium whitespace-nowrap transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:shadow-sm [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function TabsContent({
  className,
  ...props
}: React.ComponentProps<typeof TabsPrimitive.Content>) {
  return (
    <TabsPrimitive.Content
      data-slot="tabs-content"
      className={cn("flex-1 outline-none", className)}
      {...props}
    />
  )
}

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="components/upload-document.tsx">
'use client';

import { useState } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Textarea } from './ui/textarea';
import { uploadDocument } from '@/app/actions/documents';

export function UploadDocument() {
  const [loading, setLoading] = useState(false);

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setLoading(true);

    try {
      const formData = new FormData(event.currentTarget);
      await uploadDocument(formData);
      event.currentTarget.reset();
    } catch (error) {
      console.error('Error uploading document:', error);
    } finally {
      setLoading(false);
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <Input
          type="text"
          name="title"
          placeholder="Document Title"
          required
          className="w-full"
        />
      </div>
      <div>
        <Textarea
          name="content"
          placeholder="Document Content"
          required
          className="w-full min-h-[200px]"
        />
      </div>
      <div>
        <Input
          type="file"
          name="file"
          className="w-full"
        />
      </div>
      <Button type="submit" disabled={loading}>
        {loading ? 'Uploading...' : 'Upload Document'}
      </Button>
    </form>
  );
}
</file>

<file path="db/migrations/0000_initial_schema.sql">
CREATE TABLE IF NOT EXISTS sessions (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id VARCHAR(255) NOT NULL,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS documents (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id VARCHAR(255) NOT NULL,
  session_id INT NOT NULL,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  file_url VARCHAR(1000),
  file_type VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (session_id) REFERENCES sessions(id)
);

CREATE TABLE IF NOT EXISTS generated_content (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id VARCHAR(255) NOT NULL,
  session_id INT NOT NULL,
  document_id INT NOT NULL,
  type VARCHAR(50) NOT NULL,
  content TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (session_id) REFERENCES sessions(id),
  FOREIGN KEY (document_id) REFERENCES documents(id)
);
</file>

<file path="db/migrations/0000_initial_schema.ts">
import { sql } from "drizzle-orm";
import { mysqlTable, serial, text, timestamp, varchar } from "drizzle-orm/mysql-core";

export const sessions = mysqlTable("sessions", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id", { length: 191 }).notNull(),
  title: varchar("title", { length: 191 }).notNull(),
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().onUpdateNow().notNull(),
});

export const documents = mysqlTable("documents", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id", { length: 191 }).notNull(),
  sessionId: serial("session_id").notNull(),
  title: varchar("title", { length: 191 }).notNull(),
  content: text("content"),
  fileUrl: varchar("file_url", { length: 191 }),
  fileType: varchar("file_type", { length: 191 }),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().onUpdateNow().notNull(),
});

export const generatedContent = mysqlTable("generated_content", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id", { length: 191 }).notNull(),
  sessionId: serial("session_id").notNull(),
  documentId: serial("document_id").notNull(),
  type: varchar("type", { length: 191 }).notNull(),
  content: text("content").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().onUpdateNow().notNull(),
});
</file>

<file path="db/migrations/0000_initial.sql">
CREATE TABLE IF NOT EXISTS documents (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id VARCHAR(255) NOT NULL,
  title VARCHAR(255) NOT NULL,
  content TEXT NOT NULL,
  file_url VARCHAR(1000),
  file_type VARCHAR(50),
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);
</file>

<file path="db/run-migration.js">
const mysql = require('mysql2/promise');
const fs = require('fs').promises;
const path = require('path');

async function runMigration() {
  const connection = await mysql.createConnection({
    host: 'mysql-1d5a184a-sharmapranay38-f5ed.h.aivencloud.com',
    port: 16167,
    user: 'avnadmin',
    password: 'AVNS_qHb808jxCTAJDLEVxW5',
    database: 'defaultdb',
    ssl: {
      rejectUnauthorized: false
    }
  });

  try {
    const migrationFile = await fs.readFile(path.join(__dirname, 'migrations', '0000_initial.sql'), 'utf8');
    await connection.query(migrationFile);
    console.log('Migration completed successfully');
  } catch (error) {
    console.error('Error running migration:', error);
  } finally {
    await connection.end();
  }
}

runMigration();
</file>

<file path="drizzle.config.ts">
import type { Config } from "drizzle-kit";

export default {
  schema: "./db/migrations/0000_initial_schema.sql",
  out: "./db/migrations",
  driver: "mysql2",
  dbCredentials: {
    connectionString: process.env.DATABASE_URL!,
  },
} satisfies Config;
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="lib/utils/flashcard-formatter.ts">
"use server";

import { GoogleGenerativeAI } from "@google/generative-ai";

// Initialize Gemini
function getGeminiModel(modelName: string = "gemini-1.5-flash") {
  const apiKey = process.env.GEMINI_API_KEY;
  
  if (!apiKey) {
    throw new Error("Missing Gemini API key");
  }
  
  const genAI = new GoogleGenerativeAI(apiKey);
  return genAI.getGenerativeModel({ model: modelName });
}

/**
 * Formats unstructured or poorly formatted flashcard text into a consistent format
 * using Gemini AI
 * 
 * @param text The unstructured flashcard text to format
 * @returns Properly formatted flashcard text in Q/A format
 */
export async function formatFlashcardsWithGemini(text: string): Promise<string> {
  try {
    const model = getGeminiModel();
    
    const prompt = `
    I have some flashcard content that needs to be formatted properly. Please convert the following content into a well-structured set of flashcards in this exact format:

    * **Q:** [Question text]  
    * **A:** [Answer text]

    Make sure each flashcard has a clear question and answer, with a blank line between different flashcards.
    If the content already contains questions and answers, extract and format them correctly.
    If the content is just paragraphs of information, create appropriate question-answer pairs from the key points.
    
    Here's the content to format:
    
    ${text}
    `;
    
    const result = await model.generateContent(prompt);
    const formattedText = result.response.text();
    
    // Clean up the response to ensure it's in the correct format
    return formattedText
      .replace(/```markdown|```/g, '') // Remove markdown code blocks if present
      .trim();
      
  } catch (error) {
    console.error("Error formatting flashcards with Gemini:", error);
    // Return the original text if there's an error
    return text;
  }
}

// Define the Flashcard type
export interface Flashcard {
  question: string;
  answer: string;
}

/**
 * Attempts to parse flashcards from text in various formats
 * If parsing fails, it returns an empty array
 */
export async function parseFlashcardsFromText(text: string): Promise<Flashcard[]> {
  if (!text) return [];
  
  // Try various parsing strategies
  
  // Strategy 1: Standard Q/A format with asterisks
  const standardFormat = parseStandardFormat(text);
  if (standardFormat.length > 0) return standardFormat;
  
  // Strategy 2: Q: A: format without asterisks
  const simpleFormat = parseSimpleFormat(text);
  if (simpleFormat.length > 0) return simpleFormat;
  
  // Strategy 3: Question/Answer paragraph format
  const paragraphFormat = parseParagraphFormat(text);
  if (paragraphFormat.length > 0) return paragraphFormat;
  
  // No valid format found
  return [];
}

// Parse standard format: * **Q:** Question \n * **A:** Answer
function parseStandardFormat(text: string): Flashcard[] {
  const flashcards: Flashcard[] = [];
  
  // Split by new Q indicators
  const blocks = text.split(/\n\s*\*\s*\*\*Q:/i);
  
  // Process each block (skip first if empty)
  for (let i = 1; i < blocks.length; i++) {
    const block = "**Q:" + blocks[i]; // Add back the prefix we split on
    
    // Extract question and answer
    const questionMatch = block.match(/\*\*Q:\*\*\s*(.*?)(?=\n\s*\*\s*\*\*A:|$)/i);
    const answerMatch = block.match(/\*\*A:\*\*\s*(.*?)(?=\n\s*\*\s*\*\*Q:|$)/i);
    
    if (questionMatch && answerMatch) {
      flashcards.push({
        question: questionMatch[1].trim(),
        answer: answerMatch[1].trim()
      });
    }
  }
  
  return flashcards;
}

// Parse simple format: Q: Question \n A: Answer
function parseSimpleFormat(text: string): Flashcard[] {
  const flashcards: Flashcard[] = [];
  
  // Split by new Q indicators
  const blocks = text.split(/\n\s*Q:/i);
  
  // Process each block (skip first if empty)
  for (let i = 1; i < blocks.length; i++) {
    const block = "Q:" + blocks[i]; // Add back the prefix we split on
    
    // Extract question and answer
    const questionMatch = block.match(/Q:\s*(.*?)(?=\n\s*A:|$)/i);
    const answerMatch = block.match(/A:\s*(.*?)(?=\n\s*Q:|$)/i);
    
    if (questionMatch && answerMatch) {
      flashcards.push({
        question: questionMatch[1].trim(),
        answer: answerMatch[1].trim()
      });
    }
  }
  
  return flashcards;
}

// Parse paragraph format: Question paragraph \n Answer paragraph
function parseParagraphFormat(text: string): Flashcard[] {
  const flashcards: Flashcard[] = [];
  
  // Look for paragraphs that end with question marks followed by paragraphs
  const paragraphs = text.split(/\n\s*\n/);
  
  for (let i = 0; i < paragraphs.length - 1; i++) {
    const para = paragraphs[i].trim();
    const nextPara = paragraphs[i + 1].trim();
    
    // If paragraph ends with question mark, treat as Q/A pair
    if (para.endsWith('?')) {
      flashcards.push({
        question: para,
        answer: nextPara
      });
      i++; // Skip the answer paragraph in next iteration
    }
  }
  
  return flashcards;
}
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="podcast.txt">
## Podcast Episode: Cracking the Code of Software Project Management

**(Intro Music: Upbeat and techy, fades slightly under voice)**

**Host:** Hey everyone, and welcome to Tech Talk Tuesday! Today we're diving into a topic crucial for anyone involved in software development: Software Project Management (SPM).  It sounds intimidating, but the core concepts are surprisingly straightforward. We're breaking down the basics from a recent university document, making it easy to understand.


**(Sound effect: A short, positive chime)**

**Host:**  Think of SPM as the roadmap for your software project. It’s all about planning, executing, and controlling the process to deliver a successful product on time and within budget.  The document highlights the importance of SPM because, let's face it, software projects are notorious for running over budget or missing deadlines.  Why? Often, it's because of poor management.

**(Sound effect: A short, slightly dramatic sting)**

**Host:**  So, what’s the SPM process all about?  It begins with a feasibility study: is this project even worth doing? We assess costs, benefits, and requirements. If the green light is given, we move to planning.  This includes creating detailed plans—especially important for smaller projects—or outlining plans for larger ones, breaking them into manageable phases.

**(Sound effect: A short, positive chime)**

**Host:** Next comes execution. This phase involves design and implementation.  Think UI/UX design, coding, testing—all the hands-on work. But remember, a project is only as good as the people involved.  SPM emphasizes identifying stakeholders—everyone with a stake in the project's success—and setting up clear communication channels.

**(Sound effect: A short, upbeat transition)**

**Host:**  Now, how do we manage these projects? The document explores different methodologies: Waterfall, a sequential approach; Agile, a flexible and iterative method; and PRINCE2, a structured approach favoured by government and large organizations.  There's even mention of hybrid approaches, blending the best aspects of different methodologies.  They also highlight critical path management, which focuses on efficiently allocating resources to complete the most crucial tasks first.

**(Sound effect: A short, positive chime)**

**Host:** The document also stresses the importance of setting clear, measurable objectives, focusing on performance, budget, and time to completion.  And finally, it touches on project portfolio management, a high-level approach to manage multiple projects simultaneously, ensuring they align with the overall business strategy.

**(Sound effect: A short, slightly dramatic sting)**

**Host:** So, there you have it!  Software Project Management—not so scary after all. By understanding the core principles of planning, execution, and stakeholder management, and choosing the right methodology, you can significantly increase your chances of delivering a successful software project. That's all for this week's Tech Talk Tuesday! Join us next time!

**(Outro Music: Upbeat and techy, fades in and out)**
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="scripts/migrate.ts">
import { drizzle } from "drizzle-orm/mysql2";
import mysql from "mysql2/promise";
import fs from "fs";
import path from "path";
import dotenv from "dotenv";

// Load environment variables from .env file
dotenv.config();

async function main() {
  if (!process.env.DATABASE_URL) {
    throw new Error("DATABASE_URL is not defined in environment variables");
  }

  console.log("Connecting to database...");
  console.log("Database URL:", process.env.DATABASE_URL);

  const connection = await mysql.createConnection(process.env.DATABASE_URL);
  console.log("Connected to database successfully");

  // Read and execute the SQL file
  const sqlPath = path.join(process.cwd(), "db/migrations/0000_initial_schema.sql");
  const sql = fs.readFileSync(sqlPath, "utf8");

  console.log("Executing SQL migration...");
  
  try {
    // Split the SQL file into individual statements
    const statements = sql.split(";").filter(statement => statement.trim());
    
    for (const statement of statements) {
      if (statement.trim()) {
        console.log("Executing:", statement.trim().substring(0, 50) + "...");
        await connection.query(statement);
      }
    }
    
    console.log("Migrations completed successfully!");
  } catch (error) {
    console.error("Error during migration:", error);
    throw error;
  }

  await connection.end();
  console.log("Database connection closed");
}

main().catch((err) => {
  console.error("Migration failed");
  console.error(err);
  process.exit(1);
});
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

# clerk configuration (can include secrets)
/.clerk/
</file>

<file path="app/api/process/route.ts">
// /app/api/process/route.js
import { NextRequest, NextResponse } from "next/server";
import { db } from "@/db";
import { generated_content } from "@/db/schema";
import { GoogleGenerativeAI } from "@google/generative-ai";

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

export async function POST(request: NextRequest) {
  try {
    const { fileId, sessionId, userId } = await request.json();

    if (!fileId || !sessionId || !userId) {
      return NextResponse.json(
        { success: false, message: "Missing required fields" },
        { status: 400 }
      );
    }

    // In a real application, you would:
    // 1. Get the file content from storage
    // 2. Process it with Gemini
    // 3. Store the generated content

    // For now, we'll use a mock response
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });

    // Generate summary
    const summaryPrompt = "Generate a summary of the following content: [CONTENT]";
    const summaryResult = await model.generateContent(summaryPrompt);
    const summary = await summaryResult.response.text();

    // Generate flashcards
    const flashcardsPrompt = "Generate flashcards from the following content: [CONTENT]";
    const flashcardsResult = await model.generateContent(flashcardsPrompt);
    const flashcards = await flashcardsResult.response.text();

    // Generate podcast script
    const podcastPrompt = "Generate a podcast script from the following content: [CONTENT]";
    const podcastResult = await model.generateContent(podcastPrompt);
    const podcast = await podcastResult.response.text();

    // Store the generated content
    const [newContent] = await db
      .insert(generated_content)
      .values({
        sessionId,
        content: {
          summary,
          flashcards,
          podcast,
        },
      })
      .returning();

    return NextResponse.json({
      success: true,
      content: newContent,
    });
  } catch (error) {
    console.error("Error in process route:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Error processing content",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/sessions/[sessionId]/route.ts">
import { NextRequest, NextResponse } from "next/server";
import { db } from "@/db"; // Assuming @/ is configured for your src directory
import { sessions, generatedContent } from "@/db/schema";
import { eq } from "drizzle-orm";

export async function GET(
  request: NextRequest,
  context: { params: { sessionId: string } }
) {
  // Await the params to avoid the dynamic API error
  const params = await context.params;
  const sessionIdString = params.sessionId;

  if (!sessionIdString) {
    return NextResponse.json(
      { error: "Session ID is required" },
      { status: 400 }
    );
  }

  const sessionId = parseInt(sessionIdString, 10);
  if (isNaN(sessionId)) {
    return NextResponse.json(
      { error: "Invalid Session ID format" },
      { status: 400 }
    );
  }

  try {
    // Drizzle doesn't automatically create reverse relations in the query API
    // unless defined with `relations`. We'll fetch the session first,
    // then fetch the related generated content.

    const session = await db.query.sessions.findFirst({
      where: eq(sessions.id, sessionId),
      // If you have relations defined using drizzle-orm's `relations` helper,
      // you could potentially use this:
      // with: {
      //   generatedContents: true // Assuming the relation name is generatedContents
      // }
    });

    if (!session) {
      return NextResponse.json({ error: "Session not found" }, { status: 404 });
    }

    // Fetch related generated content separately
    const relatedContent = await db.query.generatedContent.findMany({
      where: eq(generatedContent.sessionId, sessionId),
    });

    // Debug: Log what we found
    console.log(`Session ${sessionId} found:`, session);
    console.log(
      `Related content for session ${sessionId}:`,
      relatedContent.length > 0 ? "Found content" : "No content found"
    );
    if (relatedContent.length > 0) {
      console.log(
        `Content types:`,
        relatedContent.map((item: any) => item.type).join(", ")
      );
    }

    // Combine session data with its generated content
    const result = {
      ...session,
      generatedContent: relatedContent,
    };

    return NextResponse.json(result);
  } catch (error) {
    console.error("Error fetching session:", error);
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
  // No need to disconnect with serverless functions usually, connection pooling handles it.
}

// TEST ENDPOINT: Add sample content to a session
export async function PUT(
  request: NextRequest,
  context: { params: { sessionId: string } }
) {
  const params = await context.params;
  const sessionIdString = params.sessionId;

  if (!sessionIdString) {
    return NextResponse.json(
      { error: "Session ID is required" },
      { status: 400 }
    );
  }

  const sessionId = parseInt(sessionIdString, 10);
  if (isNaN(sessionId)) {
    return NextResponse.json(
      { error: "Invalid Session ID format" },
      { status: 400 }
    );
  }

  try {
    // 1. Check if session exists
    const session = await db.query.sessions.findFirst({
      where: eq(sessions.id, sessionId),
    });

    if (!session) {
      return NextResponse.json({ error: "Session not found" }, { status: 404 });
    }

    // 2. Create sample content entries
    const sampleContentTypes = [
      {
        type: "summary",
        content:
          "This is a sample summary of the session content. It highlights the key points that were discussed during the session.",
      },
      {
        type: "flashcards",
        content: [
          { question: "What is the main topic?", answer: "Sample topic 1" },
          {
            question: "What is an important concept?",
            answer: "Sample concept explanation",
          },
        ],
      },
      {
        type: "podcast",
        content: {
          audioUrl: "https://example.com/sample-podcast.mp3",
          title: "Sample Podcast",
          duration: "10:30",
        },
      },
    ];

    // 3. Insert the sample content
    const insertPromises = sampleContentTypes.map((sample) =>
      db.insert(generatedContent).values({
        sessionId,
        userId: session.userId,
        type: sample.type,
        content: sample.content,
      })
    );

    await Promise.all(insertPromises);

    // 4. Return success
    return NextResponse.json({
      success: true,
      message: "Sample content created for session",
      contentTypes: sampleContentTypes.map((c) => c.type),
    });
  } catch (error) {
    console.error("Error creating sample content:", error);
    return NextResponse.json(
      {
        error: "Internal server error",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
</file>

<file path="app/api/sessions/route.ts">
// app/api/sessions/route.ts

import { NextRequest, NextResponse } from "next/server";
import { auth } from "@clerk/nextjs/server"; // Needed for GET handler (and potentially POST if you validate server-side)
import { db } from "@/db"; // Your Drizzle db instance
import { sessions } from "@/db/schema"; // Your sessions table schema
import { eq, desc } from "drizzle-orm"; // Drizzle functions

// --- POST Handler: Create a new session ---
export async function POST(request: NextRequest) {
  try {
    // 1. Parse Request Body
    // Note: You get userId from the body here. Ensure this matches how you send it from the client.
    // Alternatively, you could use `auth()` here too for server-side validation.
    const { userId, title, description } = await request.json();

    // 2. Validate Input
    if (!userId) {
      // Consider using `auth()` here instead to get the definitive userId server-side
      return NextResponse.json(
        {
          success: false,
          message:
            "User ID is required in request body (or use server-side auth)",
        },
        { status: 400 }
      );
    }
    if (!title) {
      return NextResponse.json(
        { success: false, message: "Title is required" },
        { status: 400 }
      );
    }

    console.log("Attempting to create session with data:", {
      userId,
      title,
      description,
    });

    // 3. Insert into Database
    const insertResult = await db.insert(sessions).values({
      userId, // Ensure this userId is validated/trusted
      title,
      description: description || "", // Use provided description or default to empty string
    });

    // --- Log the raw insert result ---
    // <<< ADDED DEBUG LOG >>>
    console.log(
      "Raw insertResult from db.insert:",
      JSON.stringify(insertResult, null, 2)
    );

    // 4. Get the ID of the inserted row
    // Primary focus for MySQL is insertId
    const insertedId = insertResult?.insertId ?? insertResult?.[0]?.insertId;

    // --- Log the extracted ID ---
    // <<< ADDED DEBUG LOG >>>
    console.log("Extracted insertedId:", insertedId);

    // 5. Verify ID (Check for 0, null, or undefined which indicate issues)
    if (insertedId === undefined || insertedId === null || insertedId === 0) {
      console.error(
        "Insert might have failed or insertId was not found/valid in the result:",
        insertResult
      );
      // Return 500 as we expect a valid ID after insert succeeds
      return NextResponse.json(
        {
          success: false,
          message: "Failed to create session or retrieve its valid ID",
        },
        { status: 500 }
      );
    }

    console.log(
      "Session insertion successful. Retrieved Inserted ID:",
      insertedId
    );

    // 6. Fetch the newly created session object using the obtained ID
    const [newSession] = await db
      .select()
      .from(sessions)
      // <<< VERIFY THIS COLUMN NAME >>> Ensure 'sessions.id' matches your schema's primary key column name
      .where(eq(sessions.id, insertedId))
      .limit(1); // Ensure only one record is fetched

    // 7. Handle Fetch Result
    if (!newSession) {
      // This is unlikely if the insert succeeded and ID is valid, but handle it.
      console.error(
        "Failed to fetch newly created session with ID:",
        insertedId
      );
      // Consider if this scenario should truly be success: true. Arguably, the operation isn't fully complete.
      // Returning 201 is okay as the resource *was* created.
      return NextResponse.json(
        {
          success: true, // Or maybe false? Define desired behavior.
          message: "Session created but could not fetch details immediately",
          insertedId: insertedId,
        },
        { status: 201 }
      ); // 201 Created status code is appropriate
    }

    console.log("Session created and fetched successfully:", newSession);

    // 8. Return Success Response
    return NextResponse.json(
      { success: true, session: newSession },
      { status: 201 }
    ); // Use 201 Created status
  } catch (error) {
    // 9. Handle Generic Errors
    console.error("Error in POST /api/sessions:", error); // Log the full caught error
    return NextResponse.json(
      {
        success: false,
        message: "Error creating session",
        // Provide error details in development, potentially mask in production
        error: error instanceof Error ? error.message : "Unknown server error",
      },
      { status: 500 }
    );
  }
}

// --- GET Handler: Fetch sessions for the authenticated user ---
export async function GET(request: NextRequest) {
  try {
    // 1. Authenticate User
    const session = await auth(); // Get user session from Clerk

    if (!session?.userId) {
      // User not logged in or session invalid
      return NextResponse.json(
        { success: false, message: "Unauthorized" },
        { status: 401 }
      );
    }

    const userId = session.userId;
    console.log("Fetching sessions for user:", userId);

    // 2. Fetch Sessions from Database
    const userSessions = await db
      .select() // Select all columns
      .from(sessions) // From the sessions table
      .where(eq(sessions.userId, userId)) // Where userId matches the authenticated user
      .orderBy(desc(sessions.createdAt)); // Order by creation date, newest first

    console.log(
      "Found sessions for user:",
      userId,
      "Count:",
      userSessions.length
    );

    // 3. Return Success Response
    return NextResponse.json({ success: true, sessions: userSessions });
  } catch (error) {
    // 4. Handle Generic Errors
    console.error("Error fetching sessions:", error);
    return NextResponse.json(
      {
        success: false,
        message: "Error fetching sessions",
        error: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}
</file>

<file path="app/flashcards/[id]/page.tsx">
"use client";

import { useState, useEffect } from 'react';
import { DashboardHeader } from "@/components/dashboard-header"
import { DashboardShell } from "@/components/dashboard-shell"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { ArrowLeft, ArrowRight, Shuffle, RotateCcw } from "lucide-react"
import { Progress } from "@/components/ui/progress"

// Sample flashcard data (replace with actual data fetching based on params.id)
const sampleFlashcards = [
  {
    id: 1,
    question: "What is Machine Learning?",
    answer: "A field of artificial intelligence that uses statistical techniques to give computer systems the ability to 'learn' (e.g., progressively improve performance on a specific task) from data, without being explicitly programmed."
  },
  {
    id: 2,
    question: "What are the two main types of Supervised Learning?",
    answer: "Classification and Regression."
  },
  {
    id: 3,
    question: "What is Unsupervised Learning?",
    answer: "A type of machine learning where the algorithm learns patterns from untagged data."
  },
  {
    id: 4,
    question: "What is a common example of Clustering?",
    answer: "K-Means Clustering."
  },
  {
    id: 5,
    question: "What does 'Overfitting' mean in ML?",
    answer: "A modeling error that occurs when a function is too closely fit to a limited set of data points. It may therefore fail to predict future observations reliably."
  }
];

// Helper function to shuffle an array
function shuffleArray<T>(array: T[]): T[] {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
}

export default function FlashcardStudyPage({ params }: { params: { id: string } }) {
  const [mounted, setMounted] = useState(false);
  const [cards, setCards] = useState(sampleFlashcards);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);
  const [isShuffled, setIsShuffled] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  // Prevent hydration mismatch by not rendering content until mounted
  if (!mounted) {
    return (
      <div className="flex min-h-screen flex-col">
        <DashboardHeader />
        <DashboardShell>
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-3xl font-bold tracking-tight">Loading...</h2>
          </div>
        </DashboardShell>
      </div>
    );
  }

  const currentCard = cards[currentIndex];
  const totalCards = cards.length;
  const progress = ((currentIndex + 1) / totalCards) * 100;

  const handleFlip = () => {
    setIsFlipped(!isFlipped);
  };

  const handleNext = () => {
    if (currentIndex < totalCards - 1) {
      setCurrentIndex(currentIndex + 1);
      setIsFlipped(false);
    }
  };

  const handlePrevious = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
      setIsFlipped(false);
    }
  };

  const handleShuffle = () => {
    setCards(shuffleArray(cards));
    setCurrentIndex(0);
    setIsFlipped(false);
    setIsShuffled(true);
  };

  const handleReset = () => {
    setCards(sampleFlashcards);
    setCurrentIndex(0);
    setIsFlipped(false);
    setIsShuffled(false);
  };

  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader />
      <DashboardShell>
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Machine Learning Basics</h2>
            <p className="text-muted-foreground">
              Studying {totalCards} cards • Card {currentIndex + 1} of {totalCards}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={handleShuffle}>
              <Shuffle className="mr-2 h-4 w-4" />
              Shuffle
            </Button>
            <Button variant="outline" size="sm" onClick={handleReset}>
              <RotateCcw className="mr-2 h-4 w-4" />
              Reset
            </Button>
          </div>
        </div>

        <Progress value={progress} className="mb-8" />

        <div className="flex justify-center mb-8">
          <div
            className="w-full max-w-3xl perspective cursor-pointer"
            onClick={handleFlip}
          >
            <div
              className={`relative preserve-3d card-flip-container h-[400px] transition-transform duration-700 ${isFlipped ? 'rotate-y-180' : ''}`}
            >
              {/* Front of Card (Question) */}
              <div className="absolute inset-0 w-full h-full backface-hidden">
                <Card className="w-full h-full flex items-center justify-center p-8 text-center bg-card text-card-foreground">
                  <CardContent className="flex flex-col items-center justify-center h-full w-full">
                    <h3 className="text-2xl font-bold mb-4">{currentCard.question}</h3>
                    {!isFlipped && <p className="text-muted-foreground text-sm">Click to reveal answer</p>}
                  </CardContent>
                </Card>
              </div>
              {/* Back of Card (Answer) */}
              <div className="absolute inset-0 w-full h-full backface-hidden rotate-y-180">
                <Card className="w-full h-full flex items-center justify-center p-8 text-center bg-card text-card-foreground">
                  <CardContent className="flex flex-col items-center justify-center h-full w-full">
                    <p>{currentCard.answer}</p>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </div>

        <div className="flex justify-center gap-4">
          <Button variant="outline" size="lg" onClick={handlePrevious} disabled={currentIndex === 0}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Previous
          </Button>
          <Button size="lg" onClick={handleNext} disabled={currentIndex === totalCards - 1}>
            Next
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </div>
      </DashboardShell>
    </div>
  );
}
</file>

<file path="app/sessions/new/page.tsx">
"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useAuth } from "@clerk/nextjs";
import { useRouter } from "next/navigation";
import { useState, useEffect } from "react";

export default function NewSessionPage() {
  const { userId, isLoaded } = useAuth();
  const router = useRouter();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (isLoaded && !userId) {
      router.push("/sign-in");
    }
  }, [isLoaded, userId, router]);

  async function handleSubmit(event: React.FormEvent<HTMLFormElement>) {
    event.preventDefault();
    setIsSubmitting(true);
    setError(null);

    const formData = new FormData(event.currentTarget);
    const title = formData.get("title") as string;
    const description = formData.get("description") as string;

    try {
      console.log("Creating session with data:", { title, description });

      const response = await fetch(
        `${process.env.NEXT_PUBLIC_APP_URL}/api/sessions`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title,
            description,
            userId,
          }),
        }
      );

      const data = await response.json();

      if (!response.ok) {
        console.error("Error creating session:", data);
        throw new Error(data.message || "Failed to create session");
      }

      console.log("Session created successfully:", data);

      if (data.success) {
        router.push(`/upload`);
      }
    } catch (error) {
      console.error("Error in handleSubmit:", error);
      setError(
        error instanceof Error ? error.message : "Failed to create session"
      );
    } finally {
      setIsSubmitting(false);
    }
  }

  if (!isLoaded || !userId) {
    return null;
  }

  return (
    <div className="flex min-h-screen flex-col">
      <div className="flex-1 space-y-4 p-8 pt-6">
        <div className="flex items-center justify-between space-y-2">
          <h2 className="text-3xl font-bold tracking-tight">
            Create New Session
          </h2>
        </div>
        <Card>
          <CardHeader>
            <CardTitle>Session Details</CardTitle>
            <CardDescription>
              Create a new session to organize your learning materials
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">Session Title</Label>
                <Input
                  id="title"
                  name="title"
                  placeholder="Enter a title for your session"
                  required
                />
              </div>
              <div className="space-y-2">
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  name="description"
                  placeholder="Describe what this session is about"
                  className="min-h-[100px]"
                />
              </div>
              {error && <div className="text-red-500 text-sm">{error}</div>}
              <Button type="submit" disabled={isSubmitting}>
                {isSubmitting ? "Creating..." : "Create Session"}
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
</file>

<file path="components/dashboard-header.tsx">
import Link from "next/link"
import { Button } from "@/components/ui/button"
import { ThemeToggle } from "@/components/theme-toggle"
import { Brain, Bell } from "lucide-react"
import { UserButton } from "@clerk/nextjs"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export function DashboardHeader() {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between">
        <div className="flex items-center gap-2">
          <Link href="/" className="flex items-center gap-2">
            <Brain className="h-6 w-6 text-primary" />
            <span className="text-xl font-bold">Acharya</span>
          </Link>
        </div>
        <div className="flex items-center gap-4">
          <ThemeToggle />
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <Bell className="h-5 w-5" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Notifications</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem>No new notifications</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <UserButton 
            afterSignOutUrl="/"
            appearance={{
              elements: {
                avatarBox: "h-8 w-8"
              }
            }}
          />
        </div>
      </div>
    </header>
  )
}
</file>

<file path="components/sessions-list-client.tsx">
"use client";

import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
  CardFooter,
} from "@/components/ui/card";
import { Plus } from "lucide-react";
import Link from "next/link";

interface Session {
  id: number;
  title: string;
  description: string | null;
  createdAt: Date;
}

interface SessionsListClientProps {
  sessions: Session[];
}

export function SessionsListClient({ sessions }: SessionsListClientProps) {
  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-medium">Your Sessions</h3>
        <Button asChild>
          <Link href="/upload">
            <Plus className="mr-2 h-4 w-4" />
            New Session
          </Link>
        </Button>
      </div>
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
        {sessions.map((session) => (
          <Card key={session.id}>
            <CardHeader>
              <CardTitle>{session.title}</CardTitle>
              <CardDescription>
                Created{" "}
                {session.createdAt
                  ? new Date(session.createdAt).toLocaleDateString()
                  : "Unknown date"}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-muted-foreground">
                {session.description || "No description provided"}
              </p>
            </CardContent>
            <CardFooter>
              <Button className="w-full" asChild>
                <Link href={`/sessions/${session.id}`}>Open Session</Link>
              </Button>
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}
</file>

<file path="components/ui/badge.tsx">
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";
import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
);

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}
  );

export { Badge, badgeVariants };
</file>

<file path="components/workspace-header.tsx">
"use client"

import Link from "next/link"
import { Button } from "@/components/ui/button"
import { Brain } from "lucide-react"
import { ThemeToggle } from "@/components/theme-toggle"
import { UserButton } from '@clerk/nextjs'

export function WorkspaceHeader() {
  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
      <div className="container flex h-16 items-center justify-between">
        <div className="flex items-center gap-2">
          <Link href="/" className="flex items-center gap-2">
            <Brain className="h-6 w-6 text-primary" />
            <span className="text-xl font-bold">Acharya</span>
          </Link>
        </div>
        <nav className="hidden md:flex items-center gap-6">
          <Link href="/dashboard" className="text-sm font-medium hover:text-primary">
            Dashboard
          </Link>
          <Link href="/flashcards" className="text-sm font-medium hover:text-primary">
            Flashcards
          </Link>
          <Link href="/summaries" className="text-sm font-medium hover:text-primary">
            Summaries
          </Link>
          <Link href="/podcasts" className="text-sm font-medium hover:text-primary">
            Podcasts
          </Link>
        </nav>
        <div className="flex items-center gap-4">
          <ThemeToggle />
          <UserButton afterSignOutUrl="/" />
        </div>
      </div>
    </header>
  )
}
</file>

<file path="db/index.ts">
import { drizzle } from "drizzle-orm/mysql2";
import mysql from "mysql2/promise";
import * as schema from "./schema";

// Create the connection with improved connection options
const poolConnection = mysql.createPool({
  uri: process.env.DATABASE_URL,
  // Adding connection configuration options
  connectionLimit: 10, // Default is 10
  connectTimeout: 30000, // Increase timeout to 30 seconds (from default 10s)
  waitForConnections: true,
  queueLimit: 0,
  // Disable ssl-mode warning
  ssl: process.env.NODE_ENV === "production" ? {} : undefined,
  // Enable connection retry logic
  enableKeepAlive: true,
  keepAliveInitialDelay: 10000, // 10 seconds
});

// Create the db
export const db = drizzle(poolConnection, { schema, mode: "default" });

// Add a ping function to test connection
export async function testConnection() {
  try {
    await poolConnection.query("SELECT 1");
    console.log("Database connection successful");
    return true;
  } catch (error) {
    console.error("Database connection failed:", error);
    return false;
  }
}
</file>

<file path="middleware.ts">
import { clerkMiddleware } from "@clerk/nextjs/server";
 
export default clerkMiddleware({
  publicRoutes: ["/", "/sign-in", "/sign-up"],
  ignoredRoutes: ["/sign-in/(.*)", "/sign-up/(.*)"]
});
 
export const config = {
  matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],
};
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",

    // Or if using `src` directory:
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  safelist: [
    "bg-background",
    "text-foreground",
    "border-border",
    "bg-card",
    "text-card-foreground",
    "bg-popover",
    "text-popover-foreground",
    "bg-primary",
    "text-primary-foreground",
    "bg-secondary",
    "text-secondary-foreground",
    "bg-muted",
    "text-muted-foreground",
    "bg-accent",
    "text-accent-foreground",
    "bg-destructive",
    "text-destructive-foreground",
    "border-input",
    "ring-ring",
  ],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: 0 },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: 0 },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@tailwindcss/typography"),
  ],
};
</file>

<file path="app/sessions/[sessionId]/page.tsx">
"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import { Volume2, RefreshCw, Loader2 } from "lucide-react";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";

// Define types without importing ReactMarkdown until it's installed
interface GeneratedContent {
  id: number;
  type: string; // 'summary', 'flashcards', 'podcast', etc.
  content: any; // Content can be JSON, string, etc.
  documentId?: number | null;
  createdAt: string;
}

interface SessionDetails {
  id: number;
  userId: string;
  title: string;
  description: string | null;
  createdAt: string;
  updatedAt: string;
  generatedContent: GeneratedContent[];
}

// Add this function before the SessionDetailPage component
async function testAudioGeneration(text: string) {
  try {
    console.log(
      "Testing audio generation with text:",
      text.substring(0, 50) + "..."
    );

    const response = await fetch("/api/test-audio", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ text }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(
        errorData.error || `HTTP error! status: ${response.status}`
      );
    }

    const data = await response.json();
    console.log("Audio test result:", data);

    if (data.audioPath) {
      // Create a temporary audio element to test the audio
      const audio = new Audio(data.audioPath);
      audio.play().catch((e) => console.error("Error playing test audio:", e));
    }

    return data;
  } catch (error) {
    console.error("Audio test error:", error);
    return { error: error instanceof Error ? error.message : "Unknown error" };
  }
}

// Helper to parse JSON content safely
const parseContent = (content: any) => {
  if (typeof content === "string") {
    try {
      return JSON.parse(content);
    } catch (e) {
      return content;
    }
  }
  return content;
};

// Helper to unescape text content
const unescapeText = (text: string): string => {
  if (!text) return "";

  // Handle common escape sequences
  return (
    text
      // Newlines and whitespace
      .replace(/\\n/g, "\n")
      .replace(/\\t/g, "\t")
      .replace(/\\r/g, "\r")
      // Quotes
      .replace(/\\"/g, '"')
      .replace(/\\'/g, "'")
      // Backslashes
      .replace(/\\\\/g, "\\")
      // Remove escape characters from markdown syntax
      .replace(/\\\*/g, "*")
      .replace(/\\\#/g, "#")
      .replace(/\\\[/g, "[")
      .replace(/\\\]/g, "]")
      .replace(/\\\(/g, "(")
      .replace(/\\\)/g, ")")
      .replace(/\\\`/g, "`")
      .replace(/\\\|/g, "|")
      .replace(/\\\</g, "<")
      .replace(/\\\>/g, ">")
      .replace(/\\\~/g, "~")
      .replace(/\\\_/g, "_")
      // Remove standalone ** characters
      .replace(/(\s|^)\*\*(\s|$)/g, "$1$2")
      .replace(/^\s*\*\*\s*/gm, "")
      .replace(/\s*\*\*\s*$/gm, "")
  );
};

export default function SessionDetailPage() {
  const params = useParams();
  const sessionId = params?.sessionId;
  const [sessionData, setSessionData] = useState<SessionDetails | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [addingContent, setAddingContent] = useState(false);
  const [regeneratingAudio, setRegeneratingAudio] = useState<number | null>(
    null
  );

  useEffect(() => {
    if (!sessionId) {
      setError("Session ID not found in URL.");
      setLoading(false);
      return;
    }

    const fetchSessionDetails = async () => {
      setLoading(true);
      setError(null);
      try {
        const response = await fetch(`/api/sessions/${sessionId}`);
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(
            errorData.error || `HTTP error! status: ${response.status}`
          );
        }
        const data: SessionDetails = await response.json();
        setSessionData(data);
      } catch (err) {
        console.error("Failed to fetch session details:", err);
        setError(
          err instanceof Error ? err.message : "An unknown error occurred"
        );
      } finally {
        setLoading(false);
      }
    };

    fetchSessionDetails();
  }, [sessionId]);

  // Function to regenerate audio for a content item
  const regenerateAudio = async (contentId: number, contentType: string) => {
    if (!sessionId) return;

    try {
      setRegeneratingAudio(contentId);
      const response = await fetch(
        `/api/sessions/${sessionId}/regenerate-audio`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contentId,
            contentType,
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error || `HTTP error! status: ${response.status}`
        );
      }

      // Get the successful response
      const result = await response.json();

      // Fetch updated session data
      const updatedSessionResponse = await fetch(`/api/sessions/${sessionId}`);
      const updatedSession = await updatedSessionResponse.json();
      setSessionData(updatedSession);
    } catch (err) {
      console.error("Error regenerating audio:", err);
      alert(
        "Failed to regenerate audio: " +
          (err instanceof Error ? err.message : "Unknown error")
      );
    } finally {
      setRegeneratingAudio(null);
    }
  };

  // Add this new function to add sample content
  const addSampleContent = async () => {
    if (!sessionId) return;

    try {
      setAddingContent(true);
      const response = await fetch(`/api/sessions/${sessionId}`, {
        method: "PUT",
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(
          errorData.error || `HTTP error! status: ${response.status}`
        );
      }

      // Refresh the session data to show the new content
      const sessionResponse = await fetch(`/api/sessions/${sessionId}`);
      const updatedSession = await sessionResponse.json();
      setSessionData(updatedSession);
    } catch (err) {
      console.error("Error adding sample content:", err);
      alert(
        "Failed to add sample content: " +
          (err instanceof Error ? err.message : "Unknown error")
      );
    } finally {
      setAddingContent(false);
    }
  };

  if (loading) {
    return (
      <div className="p-8">
        <div className="h-8 w-1/4 mb-4 bg-gray-200"></div>
        <div className="h-4 w-1/2 mb-6 bg-gray-200"></div>
        <div className="space-y-4">
          <div className="h-24 w-full bg-gray-200"></div>
          <div className="h-24 w-full bg-gray-200"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <div className="border border-red-500 p-4 bg-red-50">
          <h3 className="text-red-700 font-bold">Error</h3>
          <p>{error}</p>
        </div>
      </div>
    );
  }

  if (!sessionData) {
    return (
      <div className="p-8">
        <div className="border p-4">
          <h3 className="font-bold">No Session Data</h3>
          <p>Could not load session details.</p>
        </div>
      </div>
    );
  }

  // Render an audio player for monologue/podcast content
  const renderAudioPlayer = (contentItem: GeneratedContent) => {
    const content = parseContent(contentItem.content);

    // More robust audio path extraction with debugging
    let audioPath = null;
    if (typeof content === "object" && content !== null) {
      // Try various possible properties where audio URL might be stored
      audioPath = content.audioPath || content.audioUrl || content.audio;

      // If the content has a nested structure, check for audio in a 'content' property
      if (!audioPath && content.content) {
        if (typeof content.content === "object") {
          audioPath =
            content.content.audioPath ||
            content.content.audioUrl ||
            content.content.audio;
        }
      }

      // For debugging - log what we found
      console.log(
        `Content type: ${contentItem.type}, Audio path found: ${
          audioPath || "NONE"
        }`
      );
      console.log("Content structure:", content);
    }

    return (
      <div className="mt-2">
        {audioPath ? (
          <div className="mb-2">
            {/* Make sure the audio path is absolute */}
            <audio
              controls
              src={audioPath.startsWith("/") ? audioPath : `/${audioPath}`}
              className="w-full"
              preload="metadata"
            >
              Your browser does not support the audio element.
            </audio>
            <div className="mt-2 text-sm text-gray-600">
              Audio URL: {audioPath}
              <button
                onClick={() =>
                  regenerateAudio(contentItem.id, contentItem.type)
                }
                disabled={regeneratingAudio === contentItem.id}
                className="ml-4 text-sm text-blue-600 hover:underline flex items-center"
              >
                {regeneratingAudio === contentItem.id ? (
                  <>
                    <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                    Regenerating...
                  </>
                ) : (
                  <>
                    <RefreshCw className="mr-1 h-3 w-3" />
                    Regenerate Audio
                  </>
                )}
              </button>
            </div>
          </div>
        ) : (
          <div className="flex items-center mt-2">
            <span className="text-amber-700 mr-2">No audio available</span>
            <button
              onClick={() => regenerateAudio(contentItem.id, contentItem.type)}
              disabled={regeneratingAudio === contentItem.id}
              className="text-sm text-blue-600 hover:underline flex items-center"
            >
              {regeneratingAudio === contentItem.id ? (
                <>
                  <Loader2 className="mr-1 h-3 w-3 animate-spin" />
                  Generating...
                </>
              ) : (
                <>
                  <Volume2 className="mr-1 h-3 w-3" />
                  Generate Audio
                </>
              )}
            </button>
          </div>
        )}
      </div>
    );
  };

  // Helper to render different content types
  const renderContent = (contentItem: GeneratedContent) => {
    const content = parseContent(contentItem.content);

    if (contentItem.type === "monologue" || contentItem.type === "podcast") {
      return renderAudioPlayer(contentItem);
    }

    let contentText = "";

    if (contentItem.type === "summary") {
      // For summaries, ensure we have proper markdown formatting
      const summaryText =
        typeof content === "string"
          ? content
          : content?.text || JSON.stringify(content);

      // Clean the text by removing unwanted characters and normalizing whitespace
      const cleanedText = summaryText
        .replace(/\*\*/g, "") // Remove ** characters
        .replace(/['"]/g, "") // Remove quotes
        .replace(/\\n/g, "\n") // Convert \n to actual newlines
        .replace(/\\t/g, "\t") // Convert \t to actual tabs
        .replace(/\\r/g, "") // Remove \r
        .trim(); // Remove extra whitespace

      // Convert plaintext to simple markdown with paragraphs
      contentText = cleanedText
        .split(/\n\s*\n/)
        .map((para: string) => para.trim())
        .filter(Boolean)
        .join("\n\n");
    } else if (contentItem.type === "flashcards") {
      if (
        Array.isArray(content) &&
        content.length > 0 &&
        typeof content[0]?.question === "string"
      ) {
        const formattedFlashcards = content.map((fc, i) => {
          // Clean the question and answer text by removing escape sequences and special characters
          const question = fc.question
            .replace(/\\n\*/g, "") // Remove \n* sequences
            .replace(/\\\*/g, "") // Remove escaped asterisks
            .replace(/\*\*/g, "") // Remove ** sequences
            .replace(/\*/g, "") // Remove single * characters
            .replace(/\\n/g, "\n") // Convert \n to actual newlines
            .replace(/\\t/g, "\t") // Convert \t to actual tabs
            .replace(/\\r/g, "") // Remove \r
            .replace(/['"]/g, "") // Remove quotes
            .trim();

          const answer = fc.answer
            .replace(/\\n\*/g, "") // Remove \n* sequences
            .replace(/\\\*/g, "") // Remove escaped asterisks
            .replace(/\*\*/g, "") // Remove ** sequences
            .replace(/\*/g, "") // Remove single * characters
            .replace(/\\n/g, "\n") // Convert \n to actual newlines
            .replace(/\\t/g, "\t") // Convert \t to actual tabs
            .replace(/\\r/g, "") // Remove \r
            .replace(/['"]/g, "") // Remove quotes
            .trim();

          return `### Question ${i + 1}\n\n${question}\n\n${answer}\n\n---\n`;
        });
        contentText = formattedFlashcards.join("");
      } else if (typeof content === "string") {
        // Clean the content first
        const cleanedContent = content
          .replace(/\\n\*/g, "") // Remove \n* sequences
          .replace(/\\\*/g, "") // Remove escaped asterisks
          .replace(/\*\*/g, "") // Remove ** sequences
          .replace(/\*/g, "") // Remove single * characters
          .replace(/\\n/g, "\n") // Convert \n to actual newlines
          .replace(/\\t/g, "\t") // Convert \t to actual tabs
          .replace(/\\r/g, "") // Remove \r
          .replace(/['"]/g, "") // Remove quotes
          .trim();

        // Try to extract flashcards from string format
        const pairs = cleanedContent
          .split(/(?:Q:|Question:)/)
          .filter(Boolean)
          .map((part) => part.trim());

        if (pairs.length > 0) {
          const extractedCards = pairs.map((pair) => {
            const [question, answer] = pair
              .split(/(?:A:|Answer:)/)
              .map((text) => (text ? text.trim() : "Unknown"));
            return {
              question: question || "Unknown question",
              answer: answer || "Unknown answer",
            };
          });
          contentText = extractedCards
            .map(
              (fc, i) =>
                `### Question ${i + 1}\n\n${fc.question}\n\n${
                  fc.answer
                }\n\n---\n`
            )
            .join("");
        } else {
          // If no Q&A format found, just clean and display the content
          contentText = cleanedContent;
        }
      } else {
        contentText = JSON.stringify(content, null, 2);
      }
    } else {
      // For other content types
      if (typeof content === "string") {
        // Clean the text by removing unwanted characters and normalizing whitespace
        contentText = content
          .replace(/\*\*/g, "") // Remove ** characters
          .replace(/['"]/g, "") // Remove quotes
          .replace(/\\n/g, "\n") // Convert \n to actual newlines
          .replace(/\\t/g, "\t") // Convert \t to actual tabs
          .replace(/\\r/g, "") // Remove \r
          .trim(); // Remove extra whitespace
      } else {
        // Format JSON with code block for better markdown rendering
        contentText = "```json\n" + JSON.stringify(content, null, 2) + "\n```";
      }
    }

    return (
      <div className="content-display">
        <ReactMarkdown
          remarkPlugins={[remarkGfm]}
          rehypePlugins={[rehypeRaw]}
          components={{
            p: ({ node, ...props }) => <p className="mb-4" {...props} />,
            h1: ({ node, ...props }) => (
              <h1 className="text-2xl font-bold mb-4" {...props} />
            ),
            h2: ({ node, ...props }) => (
              <h2 className="text-xl font-bold mb-3" {...props} />
            ),
            h3: ({ node, ...props }) => (
              <h3 className="text-lg font-bold mb-2" {...props} />
            ),
            ul: ({ node, ...props }) => (
              <ul className="list-disc pl-5 mb-4" {...props} />
            ),
            ol: ({ node, ...props }) => (
              <ol className="list-decimal pl-5 mb-4" {...props} />
            ),
            li: ({ node, ...props }) => <li className="mb-1" {...props} />,
            a: ({ node, ...props }) => (
              <a className="text-blue-600 hover:underline" {...props} />
            ),
            blockquote: ({ node, ...props }) => (
              <blockquote
                className="border-l-4 border-gray-200 pl-4 italic my-4"
                {...props}
              />
            ),
            code: ({ node, ...props }: any) =>
              props.inline ? (
                <code className="bg-gray-100 px-1 rounded" {...props} />
              ) : (
                <pre className="bg-gray-100 p-4 rounded my-4 overflow-auto">
                  <code {...props} />
                </pre>
              ),
          }}
        >
          {contentText}
        </ReactMarkdown>
      </div>
    );
  };

  return (
    <div className="container mx-auto p-8 bg-white text-black session-detail-page">
      <div className="mb-6 border-b pb-4">
        <h1 className="text-2xl font-bold mb-2">{sessionData.title}</h1>
        <p className="text-sm mb-1">
          {sessionData.description || "No description provided."}
        </p>
        <p className="text-xs text-gray-600">
          Created: {new Date(sessionData.createdAt).toLocaleString()} | Updated:{" "}
          {new Date(sessionData.updatedAt).toLocaleString()}
        </p>
      </div>

      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold">Generated Content</h2>
        <button
          onClick={addSampleContent}
          disabled={addingContent}
          className="px-4 py-1 border border-blue-600 text-blue-600 rounded hover:bg-blue-50 disabled:opacity-50"
        >
          {addingContent ? "Adding..." : "Add Test Content"}
        </button>
      </div>

      {sessionData.generatedContent.length > 0 ? (
        <div className="space-y-8">
          {sessionData.generatedContent.map((contentItem) => (
            <div key={contentItem.id} className="border p-4">
              <div className="border-b pb-2 mb-4">
                <div className="flex justify-between items-center">
                  <h3 className="font-semibold capitalize">
                    {contentItem.type === "monologue" ||
                    contentItem.type === "podcast" ? (
                      <span className="flex items-center">
                        <Volume2 className="h-4 w-4 mr-1" />
                        {contentItem.type}
                      </span>
                    ) : (
                      contentItem.type
                    )}
                  </h3>
                  <span className="text-xs text-gray-500">
                    {new Date(contentItem.createdAt).toLocaleDateString()}
                  </span>
                </div>
              </div>
              {renderContent(contentItem)}
            </div>
          ))}
        </div>
      ) : (
        <div className="border p-4">
          <h3 className="font-bold">No content yet</h3>
          <p>
            No generated content found for this session. Click "Add Test
            Content" to add sample content for testing.
          </p>
        </div>
      )}

      {/* Add debugging tools at the bottom of the page */}
      <div className="mt-12 pt-6 border-t border-gray-200">
        <details className="text-sm text-gray-600">
          <summary className="cursor-pointer font-medium">
            Audio Debugging Tools
          </summary>
          <div className="p-4 border mt-2">
            <h3 className="font-medium mb-2">Test Audio Generation</h3>
            <p className="mb-4 text-xs">
              This will generate a test audio file using the Deepgram API.
            </p>
            <button
              onClick={() =>
                testAudioGeneration(
                  "This is a test of the audio generation API. If you can hear this, the audio is working correctly."
                )
              }
              className="px-3 py-1 bg-gray-100 border border-gray-300 rounded hover:bg-gray-200"
            >
              Test Simple Audio
            </button>
          </div>
        </details>
      </div>
    </div>
  );
}
</file>

<file path="components/upload-button.tsx">
"use client";

import type React from "react";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Upload, FileText, Youtube } from "lucide-react";
import Link from "next/link";

const buttonVariant = {
  outline: "outline" as "outline",
  ghost: "ghost" as "ghost",
  link: "link" as "link",
  default: "default" as "default",
  destructive: "destructive" as "destructive",
  secondary: "secondary" as "secondary",
};

interface UploadButtonProps {
  variant?: keyof typeof buttonVariant;
}

export function UploadButton({ variant = "default" }: UploadButtonProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [youtubeUrl, setYoutubeUrl] = useState("");
  const [file, setFile] = useState<File | null>(null);

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setFile(e.target.files[0]);
    }
  };

  const handleSubmit = (type: "file" | "youtube") => {
    // Here you would handle the upload/processing
    console.log(type === "file" ? file : youtubeUrl);
    setIsOpen(false);
    setFile(null);
    setYoutubeUrl("");
  };

  return (
    <div className="grid grid-cols-2 gap-2">
      <Button
        variant={buttonVariant[variant]}
        className="h-20 flex flex-col gap-1"
        asChild
      >
        <Link href="/upload?type=file">
          <FileText className="h-6 w-6" />
          <span>Upload Document</span>
        </Link>
      </Button>
      <Button
        variant={buttonVariant[variant]}
        className="h-20 flex flex-col gap-1"
        asChild
      >
        <Link href="/upload?type=youtube">
          <Youtube className="h-6 w-6" />
          <span>YouTube Link</span>
        </Link>
      </Button>
    </div>
  );
}
</file>

<file path="db/schema.ts">
import {
  mysqlTable,
  varchar,
  text,
  timestamp,
  int,
  json,
} from "drizzle-orm/mysql-core";

// Remove debug log
// console.log("Loading database schema definitions");

export const sessions = mysqlTable("sessions", {
  id: int("id").primaryKey().autoincrement(),
  userId: varchar("user_id", { length: 255 }).notNull(),
  title: varchar("title", { length: 255 }).notNull(),
  description: text("description"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow().onUpdateNow(),
});

export const documents = mysqlTable("documents", {
  id: int("id").primaryKey().autoincrement(),
  userId: varchar("user_id", { length: 255 }).notNull(),
  title: varchar("title", { length: 255 }).notNull(),
  content: text("content").notNull(),
  fileUrl: varchar("file_url", { length: 1000 }),
  fileType: varchar("file_type", { length: 50 }),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow().onUpdateNow(),
});

export const generatedContent = mysqlTable("generated_content", {
  id: int("id").primaryKey().autoincrement(),
  sessionId: int("session_id")
    .notNull()
    .references(() => sessions.id),
  userId: varchar("user_id", { length: 255 }).notNull(),
  type: varchar("type", { length: 50 }).notNull(), // 'summary', 'flashcards', 'podcast'
  content: json("content").notNull(), // Store the generated content as JSON
  documentId: int("document_id"), // Changed to camelCase to match TypeScript field naming
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow().onUpdateNow(),
});
</file>

<file path="app/dashboard/page.tsx">
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { DashboardHeader } from "@/components/dashboard-header";
import { RecentUploads } from "@/components/recent-uploads";
import { UploadButton } from "@/components/upload-button";
import { Overview } from "@/components/overview";
import SessionsList from "@/components/sessions-list";

import { auth } from "@clerk/nextjs/server"
import { redirect } from "next/navigation"

export default async function DashboardPage() {
  const session = await auth();
  
  if (!session?.userId) {
    redirect("/sign-in");
  }

  return (
    <div className="flex min-h-screen flex-col">
      <DashboardHeader />
      <div className="flex-1 space-y-4 p-8 pt-6">
        <div className="flex items-center justify-between space-y-2">
          <h2 className="text-3xl font-bold tracking-tight">Dashboard</h2>
        </div>
        <SessionsList />
      </div>
    </div>
  );
}
</file>

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 240 10% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 240 10% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 240 10% 3.9%;
    --primary: 262 83.3% 57.8%;
    --primary-foreground: 210 20% 98%;
    --secondary: 240 4.8% 95.9%;
    --secondary-foreground: 240 5.9% 10%;
    --muted: 240 4.8% 95.9%;
    --muted-foreground: 240 3.8% 46.1%;
    --accent: 240 4.8% 95.9%;
    --accent-foreground: 240 5.9% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 5.9% 90%;
    --input: 240 5.9% 90%;
    --ring: 262 83.3% 57.8%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 262 83.3% 57.8%;
    --primary-foreground: 210 20% 98%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 262 83.3% 57.8%;
  }

  * {
    border-color: hsl(var(--border));
  }

  body {
    @apply bg-background text-foreground;
  }
}

/* Flashcard Flip Animation */
.perspective {
  perspective: 2000px;
}

.preserve-3d {
  transform-style: preserve-3d;
  transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}

.rotate-y-180 {
  transform: rotateY(180deg);
}

.backface-hidden {
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  transform: rotateY(0deg);
}

.rotate-y-180.backface-hidden {
  transform: rotateY(180deg);
}

/* Card flip animation */
.perspective {
  perspective: 2000px;
}

.preserve-3d {
  transform-style: preserve-3d;
  transition: transform 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}

.card-flip-container:hover {
  transform: rotateY(180deg);
}

.backface-hidden {
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  transform: rotateY(0deg);
}

.rotate-y-180.backface-hidden {
  transform: rotateY(180deg);
}

/* Simple black text on white background style for session detail page */
.session-detail-page {
  color: black !important;
  background-color: white !important;
}

.session-detail-page pre,
.session-detail-page code {
  font-family: inherit;
  white-space: pre-wrap;
}

.session-detail-page .content-display pre {
  font-family: inherit;
  font-size: 14px;
  line-height: 1.6;
  background-color: #f9f9f9;
  padding: 15px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

/* Markdown styling */
.session-detail-page .content-display {
  line-height: 1.6;
}

.session-detail-page .content-display p {
  margin-bottom: 1rem;
}

.session-detail-page .content-display h1,
.session-detail-page .content-display h2,
.session-detail-page .content-display h3,
.session-detail-page .content-display h4 {
  font-weight: 600;
  margin-top: 1.5rem;
  margin-bottom: 1rem;
}

.session-detail-page .content-display h1 {
  font-size: 1.5rem;
}

.session-detail-page .content-display h2 {
  font-size: 1.25rem;
}

.session-detail-page .content-display h3 {
  font-size: 1.125rem;
}

.session-detail-page .content-display ul,
.session-detail-page .content-display ol {
  margin-bottom: 1rem;
  margin-left: 1.5rem;
}

.session-detail-page .content-display ul {
  list-style-type: disc;
}

.session-detail-page .content-display ol {
  list-style-type: decimal;
}

.session-detail-page .content-display li {
  margin-bottom: 0.25rem;
}

.session-detail-page .content-display a {
  color: #3b82f6;
  text-decoration: none;
}

.session-detail-page .content-display a:hover {
  text-decoration: underline;
}

.session-detail-page .content-display blockquote {
  border-left: 4px solid #e5e7eb;
  padding-left: 1rem;
  margin-left: 0;
  margin-right: 0;
  font-style: italic;
  margin-bottom: 1rem;
}

.session-detail-page .content-display code {
  background-color: #f3f4f6;
  padding: 0.2rem 0.4rem;
  border-radius: 0.25rem;
  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
  font-size: 0.875rem;
}

.session-detail-page .content-display pre {
  background-color: #f3f4f6;
  padding: 1rem;
  border-radius: 0.25rem;
  overflow-x: auto;
  margin-bottom: 1rem;
}

.session-detail-page .content-display pre code {
  background-color: transparent;
  padding: 0;
  font-size: 0.875rem;
  line-height: 1.7;
}
</file>

<file path="app/page.tsx">
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Brain, BookOpen, Zap, ArrowRight } from "lucide-react";
import { ThemeToggle } from "@/components/theme-toggle";
import { SignedIn, SignedOut } from "@clerk/nextjs";

export default function Home() {
  return (
    <div className="flex min-h-screen flex-col">
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container flex h-16 items-center justify-between">
          <div className="flex items-center gap-2">
            <Brain className="h-6 w-6 text-primary" />
            <span className="text-xl font-bold">Acharya</span>
          </div>
          <nav className="hidden md:flex items-center gap-6">
            <Link href="/" className="text-sm font-medium hover:text-primary">
              Home
            </Link>
            <Link href="/features" className="text-sm font-medium hover:text-primary">
              Features
            </Link>
            <SignedIn>
              <Link href="/dashboard" className="text-sm font-medium hover:text-primary">
                Dashboard
              </Link>
            </SignedIn>
            <SignedOut>
              <Link href="/sign-in" className="text-sm font-medium hover:text-primary">
                Sign In
              </Link>
            </SignedOut>
            <ThemeToggle />
          </nav>
        </div>
      </header>

      <main className="flex-1">
        {/* Hero Section */}
        <section className="relative overflow-hidden bg-gradient-to-b from-background to-background/80 py-16 md:py-24 lg:py-32">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
              <div className="space-y-6">
                <h1 className="font-heading text-4xl md:text-5xl lg:text-6xl font-bold">
                  Your AI Learning Assistant
                </h1>
                <p className="text-lg text-muted-foreground max-w-md">
                  Transform your learning experience with AI-powered tools for creating flashcards, summarizing documents, and more.
                </p>
                <div className="flex flex-wrap gap-4">
                  <SignedIn>
                    <Button asChild size="lg" className="rounded-full">
                      <Link href="/dashboard">Go to Workspace</Link>
                    </Button>
                  </SignedIn>
                  <SignedOut>
                    <Button asChild size="lg" className="rounded-full">
                      <Link href="/sign-in?redirect_url=/dashboard">Get Started</Link>
                    </Button>
                  </SignedOut>
                  <Button asChild variant="outline" size="lg" className="rounded-full">
                    <Link href="/about">Learn More</Link>
                  </Button>
                </div>
              </div>
              <div className="order-first md:order-last">
                <div className="rounded-xl bg-gradient-to-br from-primary/10 to-primary/5 p-4 shadow-lg">
                  <div className="aspect-video rounded-lg bg-background p-6 shadow-inner flex items-center justify-center">
                    <Brain className="h-20 w-20 text-primary opacity-90" />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </section>

        {/* Features Section */}
        <section className="py-16 bg-muted/30">
          <div className="container mx-auto px-4">
            <div className="text-center mb-12">
              <h2 className="text-3xl font-bold mb-4">Supercharge Your Learning</h2>
              <p className="text-muted-foreground max-w-2xl mx-auto">
                Whether you're a student, professional, or lifelong learner, our AI tools help you master any subject faster.
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
              {/* Feature 1 */}
              <div className="bg-background rounded-xl p-6 shadow-md hover:shadow-lg transition-shadow">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <BookOpen className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-bold mb-2">Smart Flashcards</h3>
                <p className="text-muted-foreground mb-4">
                  Generate AI-powered flashcards from your notes, textbooks, or any learning material.
                </p>
                <Link href="/features/flashcards" className="text-primary font-medium inline-flex items-center">
                  Learn more <ArrowRight className="h-4 w-4 ml-1" />
                </Link>
              </div>

              {/* Feature 2 */}
              <div className="bg-background rounded-xl p-6 shadow-md hover:shadow-lg transition-shadow">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <svg className="h-6 w-6 text-primary" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                </div>
                <h3 className="text-xl font-bold mb-2">Instant Summaries</h3>
                <p className="text-muted-foreground mb-4">
                  Transform lengthy documents into concise, easy-to-understand summaries in seconds.
                </p>
                <Link href="/features/summaries" className="text-primary font-medium inline-flex items-center">
                  Learn more <ArrowRight className="h-4 w-4 ml-1" />
                </Link>
              </div>

              {/* Feature 3 */}
              <div className="bg-background rounded-xl p-6 shadow-md hover:shadow-lg transition-shadow">
                <div className="rounded-full bg-yellow-500/10 w-12 h-12 flex items-center justify-center mb-4">
                  <Zap className="h-6 w-6 text-yellow-500" />
                </div>
                <h3 className="text-xl font-bold mb-2">Earn By Sharing</h3>
                <p className="text-muted-foreground mb-4">
                  Share your study materials with others and earn rewards for your contributions.
                </p>
                <Link href="/features/marketplace" className="text-primary font-medium inline-flex items-center">
                  Learn more <ArrowRight className="h-4 w-4 ml-1" />
                </Link>
              </div>
            </div>
          </div>
        </section>

        {/* CTA Section */}
        <section className="py-16 md:py-24">
          <div className="container mx-auto px-4">
            <div className="bg-gradient-to-br from-primary/20 to-primary/5 rounded-2xl p-8 md:p-12 text-center">
              <h2 className="text-3xl font-bold mb-4">Ready to Transform Your Learning?</h2>
              <p className="text-muted-foreground max-w-2xl mx-auto mb-8">
                Join thousands of students who are already using Acharya to enhance their learning experience.
              </p>
              <div className="flex flex-wrap justify-center gap-4">
                <SignedIn>
                  <Button asChild size="lg" className="rounded-full">
                    <Link href="/dashboard">Go to Dashboard</Link>
                  </Button>
                </SignedIn>
                <SignedOut>
                  <Button asChild size="lg" className="rounded-full">
                    <Link href="/sign-in?redirect_url=/dashboard">Get Started Now</Link>
                  </Button>
                </SignedOut>
              </div>
            </div>
          </div>
        </section>
      </main>

      {/* Footer */}
      <footer className="border-t py-8">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div className="flex items-center gap-2 mb-4 md:mb-0">
              <Brain className="h-5 w-5 text-primary" />
              <span className="font-bold">Acharya</span>
            </div>
            <div className="flex gap-6">
              <Link href="/about" className="text-sm text-muted-foreground hover:text-foreground">
                About
              </Link>
              <Link href="/privacy" className="text-sm text-muted-foreground hover:text-foreground">
                Privacy
              </Link>
              <Link href="/terms" className="text-sm text-muted-foreground hover:text-foreground">
                Terms
              </Link>
              <Link href="/contact" className="text-sm text-muted-foreground hover:text-foreground">
                Contact
              </Link>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
}
</file>

<file path="app/layout.tsx">
"use client";

import type React from "react";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { ClerkProvider } from '@clerk/nextjs';

const inter = Inter({ subsets: ["latin"] });

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <ClerkProvider>
      <html lang="en" suppressHydrationWarning>
        <body className={inter.className}>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
        </body>
      </html>
    </ClerkProvider>
  );
}
</file>

<file path="app/upload/page.tsx">
// app/upload/page.tsx (or your specific route file)

"use client";

import { useState, useRef, useEffect } from "react";
import { useFormState, useFormStatus } from "react-dom";

// UI Components
import { DashboardHeader } from "@/components/dashboard-header";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { ResizablePanelGroup, ResizablePanel, ResizableHandle } from "@/components/ui/resizable";
import { InteractiveFlashcards } from "@/components/interactive-flashcards";

// Icons
import {
  FileText,
  Youtube,
  Upload,
  Loader2,
  Terminal,
  Info,
  Play,
  Pause,
  Volume2,
  PanelLeft,
  PanelRight,
  Bot,
} from "lucide-react";

// Server Actions & Types
import {
  uploadAndProcessDocument,
  processYouTubeVideo,
  ActionResult,
} from "@/lib/actions/gemini";

// Types
type ProcessingType = "all" | "summary" | "flashcards" | "monologue";

// --- Constants ---
const MAX_FILE_SIZE_MB = 15;
const MAX_FILE_SIZE_BYTES = MAX_FILE_SIZE_MB * 1024 * 1024;
const ALLOWED_FILE_TYPES = [
  "application/pdf",
  "text/plain",
  "application/msword",
  "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
];
const ALLOWED_FILE_EXTENSIONS_STR = "PDF, DOC, DOCX, TXT"; // For display text
const ALLOWED_FILE_EXTENSIONS_ACCEPT = ".pdf,.doc,.docx,.txt"; // For input accept attribute

// --- Helper Component for Submit Button ---
function SubmitButton({ text = "Submit", pendingText = "Processing..." }) {
  const { pending } = useFormStatus();
  return (
    <Button type="submit" className="w-full" disabled={pending}>
      {pending ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" /> {pendingText}
        </>
      ) : (
        text
      )}
    </Button>
  );
}

// --- Helper Component for Displaying Results ---
function ResultsDisplay({ resultState }: { resultState: ActionResult | null }) {
  const [activeTab, setActiveTab] = useState<"flashcards" | "summary" | "monologue">("flashcards");
  const [isPlaying, setIsPlaying] = useState(false);
  const [enhancedSummary, setEnhancedSummary] = useState<string | null>(null);

  // Determine which tabs are available - moved outside conditional
  const availableTabs = resultState
    ? [
        resultState.flashcardsText ? "flashcards" : null,
        resultState.summaryText ? "summary" : null,
        resultState.monologueText ? "monologue" : null,
      ].filter(Boolean) as ("flashcards" | "summary" | "monologue")[]
    : [];

  // Set active tab to the first available if current is not available
  // This useEffect must be called in every render
  useEffect(() => {
    if (resultState && availableTabs.length > 0 && !availableTabs.includes(activeTab)) {
      setActiveTab(availableTabs[0]);
    }
  }, [resultState, availableTabs, activeTab]);

  // Format summary text to handle markdown better
  const formatSummaryText = (text: string) => {
    if (!text) return "";
    
    // Clean up special characters and formatting issues
    let cleaned = text
      .replace(/[^\w\s.,;:?!()[\]{}'"<>@#$%^&*+=\-_\\|/~`]|[^\x00-\x7F]/g, '') // Remove non-standard chars
      .replace(/\*\*/g, '') // Remove markdown bold
      .replace(/\*/g, '') // Remove markdown italics
      .replace(/`/g, '') // Remove code ticks
      .replace(/\n{3,}/g, '\n\n') // Replace multiple newlines with just two
      .trim();
    
    // Replace markdown bullet points with proper HTML
    let formatted = cleaned.replace(/^\s*[\-\*]\s+(.+)$/gm, '<li>$1</li>');
    
    // Wrap lists in ul tags
    formatted = formatted.replace(/<li>(.+?)<\/li>(\s*<li>)/g, '<li>$1</li>$2');
    formatted = formatted.replace(/(<li>.+<\/li>)/gs, '<ul class="list-disc pl-5 my-3">$1</ul>');
    
    // Handle headings
    formatted = formatted.replace(/^#+\s+(.+)$/gm, '<h3 class="text-lg font-semibold my-3 text-foreground">$1</h3>');
    
    // Handle paragraphs - ensure they have proper text color
    formatted = formatted.replace(/^([^<\n].+)$/gm, '<p class="text-foreground my-2">$1</p>');
    
    // Remove empty paragraphs
    formatted = formatted.replace(/<p[^>]*>\s*<\/p>/g, '');
    
    return formatted;
  };

  // Use Gemini to enhance the summary when the tab changes to summary
  useEffect(() => {
    const enhanceSummaryWithGemini = async () => {
      if (activeTab === "summary" && resultState?.summaryText && !enhancedSummary) {
        try {
          // We'll use the existing summary for now, but in a real implementation
          // you would call the Gemini API here to enhance the content
          setEnhancedSummary(formatSummaryText(resultState.summaryText));
        } catch (error) {
          console.error("Error enhancing summary:", error);
          // Fallback to formatted original summary
          setEnhancedSummary(formatSummaryText(resultState.summaryText));
        }
      }
    };
    
    enhanceSummaryWithGemini();
  }, [activeTab, resultState?.summaryText, enhancedSummary]);

  if (!resultState) {
    return (
      <div className="h-full flex flex-col">
        <div className="flex items-center justify-between p-4 border-b">
          <h2 className="text-lg font-semibold flex items-center">
            <PanelRight className="mr-2 h-5 w-5 text-muted-foreground" />
            Results Panel
          </h2>
        </div>
        <div className="flex-1 p-6 flex flex-col items-center justify-center text-center">
          <Terminal className="h-16 w-16 text-muted-foreground mb-4" />
          <p className="text-muted-foreground">Waiting for input...</p>
          <p className="text-xs text-muted-foreground mt-2 max-w-md">
            Generated content (summaries, flashcards, etc.) will appear here
            after you process a file or YouTube video.
          </p>
        </div>
      </div>
    );
  }

  // Check if this is an "all" result with separate sections
  const hasMultipleSections =
    resultState.flashcardsText ||
    resultState.summaryText ||
    resultState.monologueText;

  return (
    <div className="h-full flex flex-col">
      <div className="flex items-center justify-between p-4 border-b">
        <h2 className={`text-lg font-semibold flex items-center ${
          resultState.success ? "text-green-700 dark:text-green-500" : "text-red-700 dark:text-red-500"
        }`}>
          <PanelRight className="mr-2 h-5 w-5" />
          {resultState.success ? "Processing Successful" : "Processing Failed"}
        </h2>
      </div>
      <div className="flex-1 overflow-auto">
        <Alert variant={resultState.success ? "default" : "destructive"} className="m-4">
          <AlertTitle>{resultState.success ? "Status" : "Error"}</AlertTitle>
          <AlertDescription>{resultState.message}</AlertDescription>
          {resultState.error && !resultState.success && (
            <p className="text-xs mt-2 font-mono bg-red-100 dark:bg-red-900/30 p-1 rounded inline-block">
              Details: {resultState.error}
            </p>
          )}
        </Alert>

        {hasMultipleSections && resultState.success && (
          <div className="px-4">
            {/* Navigation Tabs */}
            {availableTabs.length > 1 && (
              <div className="border-b mb-4">
                <div className="flex space-x-1">
                  {resultState.flashcardsText && (
                    <button
                      onClick={() => setActiveTab("flashcards")}
                      className={`px-4 py-2 font-medium text-sm rounded-t-md transition-colors ${
                        activeTab === "flashcards"
                          ? "bg-primary text-primary-foreground"
                          : "hover:bg-muted"
                      }`}
                    >
                      <FileText className="inline-block mr-2 h-4 w-4" />
                      Flashcards
                    </button>
                  )}
                  {resultState.summaryText && (
                    <button
                      onClick={() => setActiveTab("summary")}
                      className={`px-4 py-2 font-medium text-sm rounded-t-md transition-colors ${
                        activeTab === "summary"
                          ? "bg-primary text-primary-foreground"
                          : "hover:bg-muted"
                      }`}
                    >
                      <FileText className="inline-block mr-2 h-4 w-4" />
                      Summary
                    </button>
                  )}
                  {resultState.monologueText && (
                    <button
                      onClick={() => setActiveTab("monologue")}
                      className={`px-4 py-2 font-medium text-sm rounded-t-md transition-colors ${
                        activeTab === "monologue"
                          ? "bg-primary text-primary-foreground"
                          : "hover:bg-muted"
                      }`}
                    >
                      <FileText className="inline-block mr-2 h-4 w-4" />
                      Monologue
                    </button>
                  )}
                </div>
              </div>
            )}

            {/* Content Panels */}
            <div className="pb-6">
              {activeTab === "flashcards" && resultState.flashcardsText && (
                <div className="bg-background rounded-md border shadow-sm">
                  <InteractiveFlashcards flashcardsText={resultState.flashcardsText} />
                </div>
              )}

              {activeTab === "summary" && resultState.summaryText && (
                <div className="bg-card p-4 rounded-md border text-card-foreground">
                  {enhancedSummary ? (
                    <div 
                      className="prose prose-sm dark:prose-invert max-w-none text-foreground" 
                      dangerouslySetInnerHTML={{ __html: enhancedSummary }}
                    />
                  ) : (
                    <div className="flex justify-center items-center py-8">
                      <Loader2 className="h-6 w-6 animate-spin text-primary" />
                      <span className="ml-2 text-sm">Enhancing summary...</span>
                    </div>
                  )}
                </div>
              )}

              {activeTab === "monologue" && resultState.monologueText && (
                <div className="space-y-4">
                  {resultState.audioFilePath && (
                    <div className="bg-card p-4 rounded-md border">
                      <h3 className="font-semibold mb-2 text-base flex items-center">
                        <Volume2 className="mr-2 h-5 w-5" />
                        Listen to Monologue
                      </h3>
                      <div className="flex items-center space-x-4 bg-muted/50 p-3 rounded-md">
                        <Button
                          size="icon"
                          variant="outline"
                          onClick={() => {
                            const audio = document.querySelector('audio');
                            if (audio) {
                              if (audio.paused) {
                                audio.play();
                                setIsPlaying(true);
                              } else {
                                audio.pause();
                                setIsPlaying(false);
                              }
                            }
                          }}
                          className="h-10 w-10 rounded-full"
                        >
                          {isPlaying ? <Pause className="h-5 w-5" /> : <Play className="h-5 w-5" />}
                        </Button>
                        <div className="flex-1">
                          <audio 
                            src={resultState.audioFilePath} 
                            onEnded={() => setIsPlaying(false)}
                            onPause={() => setIsPlaying(false)}
                            onPlay={() => setIsPlaying(true)}
                          />
                          <div className="text-sm font-medium">Generated Audio</div>
                          <div className="text-xs text-muted-foreground">
                            Click to {isPlaying ? "pause" : "play"} the monologue
                          </div>
                        </div>
                      </div>
                      
                      {/* AI Assistant Animation */}
                      <div className={`mt-4 p-3 bg-primary/5 rounded-lg border border-primary/20 ${isPlaying ? 'block' : 'hidden'}`}>
                        <div className="flex items-start space-x-3">
                          <div className="w-10 h-10 rounded-full bg-primary/20 flex items-center justify-center">
                            <Bot className="h-5 w-5 text-primary" />
                          </div>
                          <div className="flex-1">
                            <div className="font-medium">AI Assistant</div>
                            <div className="text-sm text-muted-foreground">
                              {isPlaying ? (
                                <div className="flex items-center">
                                  <span>Speaking</span>
                                  <span className="ml-2 flex space-x-1">
                                    <span className="inline-block w-1.5 h-1.5 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0ms' }}></span>
                                    <span className="inline-block w-1.5 h-1.5 bg-primary rounded-full animate-bounce" style={{ animationDelay: '150ms' }}></span>
                                    <span className="inline-block w-1.5 h-1.5 bg-primary rounded-full animate-bounce" style={{ animationDelay: '300ms' }}></span>
                                  </span>
                                </div>
                              ) : "Ready to speak"}
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                  <div className="bg-card p-4 rounded-md border text-sm text-card-foreground">
                    <pre className="whitespace-pre-wrap font-sans">
                      {resultState.monologueText}
                    </pre>
                  </div>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

// --- Upload Panel Component ---
function UploadPanel({
  fileInputRef,
  youtubeUrlInputRef,
  selectedFile,
  fileFormAction,
  youtubeFormAction,
  handleBrowseClick,
  handleFileChange,
  handleYoutubeUrlChange,
}: {
  fileInputRef: React.RefObject<HTMLInputElement | null>;
  youtubeUrlInputRef: React.RefObject<HTMLInputElement | null>;
  selectedFile: File | null;
  fileFormAction: (formData: FormData) => void;
  youtubeFormAction: (formData: FormData) => void;
  handleBrowseClick: () => void;
  handleFileChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  handleYoutubeUrlChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
}) {
  return (
    <div className="h-full flex flex-col">
      <div className="flex items-center justify-between p-4 border-b">
        <h2 className="text-lg font-semibold flex items-center">
          <PanelLeft className="mr-2 h-5 w-5 text-muted-foreground" />
          Upload Content
        </h2>
      </div>
      <div className="flex-1 overflow-auto p-4">
        <Tabs defaultValue="file" className="w-full">
          <TabsList className="grid w-full grid-cols-2 mb-4">
            <TabsTrigger value="file">Upload File</TabsTrigger>
            <TabsTrigger value="youtube">YouTube Link</TabsTrigger>
          </TabsList>

          {/* File Upload Tab */}
          <TabsContent value="file" className="pt-2">
            <form action={fileFormAction} className="space-y-6">
              <div className="space-y-4">
                <h3 className="text-base font-medium">Upload Document</h3>
                <p className="text-sm text-muted-foreground">
                  Upload {ALLOWED_FILE_EXTENSIONS_STR} (max {MAX_FILE_SIZE_MB}MB) to generate flashcards, summary,
                  and monologue.
                </p>
              </div>
              
              {/* Consider the Label approach mentioned earlier if preferred */}
              <input
                type="file"
                name="file"
                id="file-input" // Added ID if using Label htmlFor
                ref={fileInputRef}
                onChange={handleFileChange}
                className="hidden"
                accept={ALLOWED_FILE_EXTENSIONS_ACCEPT}
                required
              />
              <div
                className="flex flex-col items-center justify-center border-2 border-dashed rounded-lg p-6 text-center hover:border-primary cursor-pointer transition-colors"
                onClick={handleBrowseClick} // Keep if not using Label
                // Add appropriate aria attributes if not using Label
              >
                <Upload className="h-10 w-10 text-muted-foreground mb-3" />
                <div className="space-y-1">
                  <h3 className="text-base font-medium break-all px-2">
                    {selectedFile
                      ? selectedFile.name
                      : "Click or drag file here"}
                  </h3>
                  <p className="text-sm text-muted-foreground">
                    Supports {ALLOWED_FILE_EXTENSIONS_STR} up to{" "}
                    {MAX_FILE_SIZE_MB}MB
                  </p>
                  {!selectedFile && (
                    <Button variant="outline" size="sm" className="mt-2">
                      Browse Files
                    </Button>
                  )}
                </div>
              </div>
              {selectedFile && (
                <p className="text-sm text-center text-green-600 font-medium">
                  Selected: {selectedFile.name} (
                  {(selectedFile.size / 1024 / 1024).toFixed(2)} MB)
                </p>
              )}
              <input
                type="hidden"
                name="processingOption"
                value="all"
              />
              <SubmitButton
                text="Generate Flashcards, Summary & Monologue"
                pendingText="Processing File..."
              />
            </form>
          </TabsContent>

          {/* YouTube Tab */}
          <TabsContent value="youtube" className="pt-2">
            <form action={youtubeFormAction} className="space-y-6">
              <div className="space-y-4">
                <h3 className="text-base font-medium">Add YouTube Video</h3>
                <p className="text-sm text-muted-foreground">
                  Paste a YouTube video link to generate flashcards,
                  summary, and monologue.
                  <span className="block text-xs text-amber-700 mt-1">
                    Note: Processing may take longer. Success depends on
                    URL accessibility and transcript availability.
                  </span>
                </p>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="youtube-url">YouTube URL</Label>
                <Input
                  ref={youtubeUrlInputRef}
                  id="youtube-url"
                  name="youtubeUrl"
                  placeholder="https://www.youtube.com/watch?v=..." // Updated placeholder
                  required
                  type="url" // Use type="url" for basic browser validation
                  onChange={handleYoutubeUrlChange}
                />
              </div>
              {/* Simplified placeholder visual */}
              <div className="flex items-center justify-center border-2 border-dashed rounded-lg p-6 text-center bg-gray-50 dark:bg-gray-900/50">
                <Youtube className="h-10 w-10 text-red-600 mr-4" />
                <p className="text-sm text-muted-foreground">
                  Enter a valid YouTube video URL above.
                </p>
              </div>
              <input
                type="hidden"
                name="processingOption"
                value="all"
              />
              <SubmitButton
                text="Generate Flashcards, Summary & Monologue"
                pendingText="Processing Video..."
              />
            </form>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}

// --- Main Upload Page Component ---
export default function UploadPage() {
  const [isClient, setIsClient] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [youtubeUrl, setYoutubeUrl] = useState("");
  const [processingType, setProcessingType] = useState<ProcessingType>("all");
  const [resultState, setResultState] = useState<ActionResult | null>(null);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Refs for file input and YouTube URL input
  const fileInputRef = useRef<HTMLInputElement | null>(null);
  const youtubeUrlInputRef = useRef<HTMLInputElement | null>(null);

  const [fileState, fileFormAction] = useFormState<
    ActionResult | null,
    FormData
  >(uploadAndProcessDocument, null);
  const [youtubeState, youtubeFormAction] = useFormState<
    ActionResult | null,
    FormData
  >(processYouTubeVideo, null);

  useEffect(() => {
    if (fileState?.inputSource === "file") {
      // Optional chaining for safety
      setResultState(fileState);
      if (fileState.success) {
        setSelectedFile(null);
        if (fileInputRef.current) {
          fileInputRef.current.value = "";
        }
      }
    }
  }, [fileState]);

  useEffect(() => {
    if (youtubeState?.inputSource === "youtube") {
      // Optional chaining for safety
      setResultState(youtubeState);
      if (youtubeState.success && youtubeUrlInputRef.current) {
        youtubeUrlInputRef.current.value = "";
      }
    }
  }, [youtubeState]);

  const handleBrowseClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      if (file.size > MAX_FILE_SIZE_BYTES) {
        alert(`File size exceeds ${MAX_FILE_SIZE_MB}MB limit.`);
        setSelectedFile(null);
        event.target.value = ""; // Reset file input
        return;
      }
      // Client-side type check (supplementary to server-side)
      // Checking file.type is generally more reliable than just extension
      if (!ALLOWED_FILE_TYPES.includes(file.type)) {
        // Check common edge cases like empty type for some OS/browser combos if needed
        if (
          !ALLOWED_FILE_EXTENSIONS_ACCEPT.split(",").some((ext) =>
            file.name.toLowerCase().endsWith(ext)
          )
        ) {
          alert(
            `Unsupported file type. Allowed: ${ALLOWED_FILE_EXTENSIONS_STR}.`
          );
          setSelectedFile(null);
          event.target.value = ""; // Reset file input
          return;
        }
      }
      setSelectedFile(file);
      setResultState(null);
    } else {
      setSelectedFile(null);
    }
  };

  const handleYoutubeUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setYoutubeUrl(event.target.value);
    setResultState(null);
  };

  return (
    <div className="max-w-screen-xl mx-auto p-4">
      <DashboardHeader />
      <div className="mt-6">
        <div className="mb-6">
          <h1 className="text-2xl font-bold tracking-tight">Upload & Process Content</h1>
          <p className="text-muted-foreground">
            Upload documents or YouTube videos to generate AI-powered flashcards, summaries, and audio monologues.
          </p>
        </div>
        <ResizablePanelGroup direction="horizontal">
          <ResizablePanel defaultSize={40} minSize={30}>
            <UploadPanel 
              fileInputRef={fileInputRef}
              youtubeUrlInputRef={youtubeUrlInputRef}
              selectedFile={selectedFile}
              fileFormAction={fileFormAction}
              youtubeFormAction={youtubeFormAction}
              handleBrowseClick={handleBrowseClick}
              handleFileChange={handleFileChange}
              handleYoutubeUrlChange={handleYoutubeUrlChange}
            />
          </ResizablePanel>
          <ResizableHandle withHandle />
          <ResizablePanel defaultSize={60} minSize={30}>
            <ResultsDisplay resultState={resultState} />
          </ResizablePanel>
        </ResizablePanelGroup>
      </div>
    </div>
  );
}
</file>

<file path="lib/actions/gemini.ts">
// app/actions.ts
"use server";

import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";
import { createClient } from "@deepgram/sdk";
import fs from "fs";
import { pipeline } from "stream/promises";
import path from "path";
import { Readable } from "stream";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { redirect } from "next/navigation";
import { db } from "@/db";
import { documents, sessions, generatedContent } from "@/db/schema";
import { eq, desc } from "drizzle-orm";
import { nanoid } from "nanoid";

// --- Define structure for action results (shared by both actions) ---
export interface ActionResult {
  success: boolean;
  message: string;
  resultText?: string; // To hold the generated text from Gemini
  error?: string;
  inputSource?: "file" | "youtube"; // Optional: Track which action ran
  audioFilePath?: string; // Path to the generated audio file for conversations
  flashcardsText?: string; // To hold generated flashcards
  summaryText?: string; // To hold generated summary
  monologueText?: string; // To hold generated monologue
  sessionId?: string; // To track the session ID for saved content
}

// --- Helper function to determine the prompt based on the option ---
// Updated to handle conversation generation
function getPromptForOption(
  option: string | null,
  contentType: "document" | "video"
): string {
  const contentDesc =
    contentType === "video" ? "this video" : "the attached document";
  switch (option) {
    case "flashcards":
      return `Generate concise flashcards (question/answer format) covering the key points of ${contentDesc}:`;
    case "summary":
      return `Provide a detailed summary of ${contentDesc}, highlighting the main arguments, topics, and conclusions:`;
    // --- MODIFIED CASE ---
    case "conversation":
      // Updated to request a single-speaker monologue of 1800-2000 characters
      return `Create a comprehensive spoken monologue by a single speaker (named Alex) discussing the key points from ${contentDesc}. The monologue should be between 1800-2000 characters (aim for close to 2000 but do not exceed it). Make it sound natural and conversational, as if Alex is presenting a podcast episode discussing the content. Structure the response simply as "Alex: [monologue content]" without additional formatting.`;
    // --- END MODIFICATION ---
    case "all":
      return `Process ${contentDesc} and provide: 
      1. FLASHCARDS: Generate a set of concise flashcards (question/answer format) covering the key points.
      2. SUMMARY: Provide a detailed summary highlighting the main arguments, topics, and conclusions.
      3. MONOLOGUE: Create a comprehensive spoken monologue by a single speaker (named Alex) discussing the key points. The monologue should be between 1800-2000 characters (aim for close to 2000 but do not exceed it). Make it sound natural and conversational, as if Alex is presenting a podcast episode.
      
      Format your response with clear headings (FLASHCARDS, SUMMARY, MONOLOGUE) separating each section.`;
    default: // Default or if option is missing
      return `Summarize the key information in ${contentDesc}:`;
  }
}

// --- Helper function to convert File to Gemini Part (for inline data) ---
async function fileToGenerativePart(file: File) {
  const base64EncodedData = Buffer.from(await file.arrayBuffer()).toString(
    "base64"
  );
  return {
    inlineData: {
      data: base64EncodedData,
      mimeType: file.type,
    },
  };
}

// --- Shared Gemini Initialization Logic ---
function getGeminiModel(modelName: string = "gemini-1.5-flash") {
  const API_KEY = process.env.GEMINI_API_KEY;
  if (!API_KEY) {
    console.error("GEMINI_API_KEY environment variable not set!");
    throw new Error("Server configuration error: API Key is missing.");
  }
  try {
    const genAI = new GoogleGenerativeAI(API_KEY);
    return genAI.getGenerativeModel({
      model: modelName,
      // safetySettings: [ // Optional: Keep or remove safety settings as needed
      //     { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE }
      // ]
    });
  } catch (error: any) {
    console.error("Error initializing Gemini SDK:", error);
    throw new Error(
      "Server configuration error: Could not initialize AI Model."
    );
  }
}

// --- Function to generate audio from conversation text using Deepgram ---
async function generateConversationAudio(
  conversationText: string
): Promise<string | null> {
  try {
    const deepgramApiKey = process.env.DEEPGRAM_API_KEY;
    if (!deepgramApiKey) {
      console.error("DEEPGRAM_API_KEY environment variable not set!");
      throw new Error(
        "Server configuration error: Deepgram API Key is missing."
      );
    }

    // Enforce strict 2000 character limit for Deepgram
    const MAX_CHARACTER_LIMIT = 2000;
    if (conversationText.length > MAX_CHARACTER_LIMIT) {
      console.warn(
        `Conversation text exceeds ${MAX_CHARACTER_LIMIT} character limit. Truncating...`
      );
      conversationText = conversationText.substring(0, MAX_CHARACTER_LIMIT);
    }

    const deepgram = createClient(deepgramApiKey);

    // Create a unique filename for this conversation
    const timestamp = new Date().getTime();
    const outputDir = path.join(process.cwd(), "public", "audio");
    const outputFileName = `conversation-${timestamp}.mp3`;
    const outputPath = path.join(outputDir, outputFileName);
    const publicPath = `/audio/${outputFileName}`;

    // Ensure the directory exists
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true });
    }

    const response = await deepgram.speak.request(
      { text: conversationText },
      {
        model: "aura-arcas-en",
      }
    );

    const stream = await response.getStream();
    if (stream) {
      const file = fs.createWriteStream(outputPath);

      // Convert Web Stream to Node.js Readable stream
      const chunks: Uint8Array[] = [];
      const reader = stream.getReader();

      let done = false;
      while (!done) {
        const { value, done: doneReading } = await reader.read();
        done = doneReading;
        if (value) {
          chunks.push(value);
        }
      }

      // Create a readable stream from the chunks
      const nodeStream = Readable.from(Buffer.concat(chunks));

      // Pipe to file using Node.js streams
      await pipeline(nodeStream, file);

      console.log(`Audio file written to ${outputPath}`);
      return publicPath;
    } else {
      console.error("Error generating audio: No stream returned");
      return null;
    }
  } catch (error: any) {
    console.error("Error generating audio with Deepgram:", error);
    return null;
  }
}

// Helper function to extract content from all-in-one response
function extractContentSections(text: string) {
  // Initialize with empty values
  let flashcards = "";
  let summary = "";
  let monologue = "";

  // Extract flashcards section
  const flashcardsMatch = text.match(
    /FLASHCARDS:?([\s\S]*?)(?=SUMMARY:|MONOLOGUE:|$)/i
  );
  if (flashcardsMatch && flashcardsMatch[1]) {
    flashcards = flashcardsMatch[1].trim();
  }

  // Extract summary section
  const summaryMatch = text.match(
    /SUMMARY:?([\s\S]*?)(?=FLASHCARDS:|MONOLOGUE:|$)/i
  );
  if (summaryMatch && summaryMatch[1]) {
    summary = summaryMatch[1].trim();
  }

  // Extract monologue section (might contain "Alex:" prefix)
  const monologueMatch = text.match(
    /MONOLOGUE:?([\s\S]*?)(?=FLASHCARDS:|SUMMARY:|$)/i
  );
  if (monologueMatch && monologueMatch[1]) {
    monologue = monologueMatch[1].trim();
    // If monologue contains "Alex:" prefix, keep only what follows
    const alexMatch = monologue.match(/Alex:?([\s\S]*)/i);
    if (alexMatch && alexMatch[1]) {
      monologue = alexMatch[1].trim();
    }
  }

  return { flashcards, summary, monologue };
}

// --- Function to store content in database ---
async function storeGeneratedContent(
  contentType: "flashcards" | "summary" | "monologue" | "all",
  content: {
    flashcards?: string;
    summary?: string;
    monologue?: string;
    audioPath?: string;
  },
  sourceInfo: {
    sourceType: "file" | "youtube";
    sourceName?: string; // Filename or YouTube URL
  }
): Promise<string | null> {
  try {
    // Get current user from auth
    const authResult = await auth();
    if (!authResult || !authResult.userId) {
      console.error("No authorized user found");
      return null;
    }

    const userId = authResult.userId;

    // Create a descriptive title based on source
    const title = sourceInfo.sourceName
      ? `${sourceInfo.sourceType === "file" ? "File" : "YouTube"}: ${
          sourceInfo.sourceName
        }`
      : `Content from ${sourceInfo.sourceType}`;

    // Use direct SQL query for session creation using the Drizzle SQL builder
    const sessionValues = {
      userId: userId,
      title: title,
      description: `Generated ${
        contentType === "all"
          ? "flashcards, summary, and monologue"
          : contentType
      } from ${sourceInfo.sourceType}`,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    await db.insert(sessions).values(sessionValues);

    // Get the last inserted ID using MySQL-specific query
    const result = await db.execute(`SELECT LAST_INSERT_ID() as id`);
    // The result format may vary, so we use type assertion for now
    const sessionId = parseInt((result as any)[0][0].id);

    if (!sessionId) {
      throw new Error("Failed to get session ID");
    }

    // Create a document entry using the Drizzle SQL builder
    const originalContent =
      content.summary || content.monologue || content.flashcards || "";
    const documentValues = {
      userId: userId,
      title: title,
      content: originalContent.substring(0, 1000), // Limit the content length
      fileType: sourceInfo.sourceType === "file" ? "text" : "youtube",
      fileUrl:
        sourceInfo.sourceType === "youtube" ? sourceInfo.sourceName : null,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    await db.insert(documents).values(documentValues);

    // Get the document ID
    const docResult = await db.execute(`SELECT LAST_INSERT_ID() as id`);
    const documentId = parseInt((docResult as any)[0][0].id);

    if (!documentId) {
      throw new Error("Failed to get document ID");
    }

    // Store each content type in the generated_content table
    if (contentType === "all" || contentType === "flashcards") {
      if (content.flashcards) {
        const flashcardsValues = {
          sessionId: sessionId,
          userId: userId,
          type: "flashcards",
          content: JSON.stringify(content.flashcards),
          documentId: documentId,
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        await db.insert(generatedContent).values(flashcardsValues);
      }
    }

    if (contentType === "all" || contentType === "summary") {
      if (content.summary) {
        const summaryValues = {
          sessionId: sessionId,
          userId: userId,
          type: "summary",
          content: JSON.stringify(content.summary),
          documentId: documentId,
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        await db.insert(generatedContent).values(summaryValues);
      }
    }

    if (contentType === "all" || contentType === "monologue") {
      if (content.monologue) {
        const contentObj = content.audioPath
          ? { text: content.monologue, audioPath: content.audioPath }
          : content.monologue;

        const monologueValues = {
          sessionId: sessionId,
          userId: userId,
          type: "monologue",
          content: JSON.stringify(contentObj),
          documentId: documentId,
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        await db.insert(generatedContent).values(monologueValues);
      }
    }

    return sessionId.toString();
  } catch (error) {
    console.error("Error storing content in database:", error);
    return null;
  }
}

// --- Server Action for File Uploads ---
export async function uploadAndProcessDocument(
  prevState: ActionResult | null,
  formData: FormData
): Promise<ActionResult> {
  console.log("Server Action: uploadAndProcessDocument triggered.");
  const file = formData.get("file") as File | null;
  const processingOption = formData.get("processingOption") as string | null;

  // Validation (remains the same)
  if (!file || file.size === 0) {
    return {
      success: false,
      message: "No file provided.",
      error: "File Missing",
      inputSource: "file",
    };
  }
  if (file.size > 15 * 1024 * 1024) {
    return {
      success: false,
      message: "File exceeds 15MB limit.",
      error: "File Too Large",
      inputSource: "file",
    };
  }
  const allowedTypes = [
    "application/pdf",
    "text/plain",
    "application/msword",
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
  ];
  if (!allowedTypes.includes(file.type)) {
    return {
      success: false,
      message: "Unsupported file type (PDF, DOC, DOCX, TXT only).",
      error: "Invalid File Type",
      inputSource: "file",
    };
  }

  console.log(
    `File: ${file.name}, Type: ${file.type}, Option: ${processingOption}`
  );

  try {
    const model = getGeminiModel("gemini-1.5-flash");
    const textPrompt = getPromptForOption(processingOption, "document");
    const filePart = await fileToGenerativePart(file);

    console.log("Sending file request to Gemini...");
    const result = await model.generateContent([textPrompt, filePart]);
    const response = result.response;
    const generatedText = response.text();
    console.log("Gemini response received.");

    // For "all" option, extract individual content sections
    let flashcardsText, summaryText, monologueText;
    let audioFilePath = null;

    if (processingOption === "all") {
      const sections = extractContentSections(generatedText);
      flashcardsText = sections.flashcards;
      summaryText = sections.summary;
      monologueText = sections.monologue;

      // Generate audio for the monologue part
      if (monologueText) {
        console.log("Generating audio for monologue...");
        audioFilePath = await generateConversationAudio(monologueText);
      }
    } else {
      // Generate audio if the option is "conversation"
      if (processingOption === "conversation") {
        console.log("Generating audio for conversation...");
        audioFilePath = await generateConversationAudio(generatedText);
        monologueText = generatedText;
      } else if (processingOption === "flashcards") {
        flashcardsText = generatedText;
      } else if (processingOption === "summary") {
        summaryText = generatedText;
      }
    }

    // Store the content in the database
    let sessionId = null;

    sessionId = await storeGeneratedContent(
      processingOption as any,
      {
        flashcards: flashcardsText,
        summary: summaryText,
        monologue: monologueText,
        audioPath: audioFilePath || undefined,
      },
      {
        sourceType: "file",
        sourceName: file.name,
      }
    );

    // Success message remains generic but accurate
    return {
      success: true,
      message: `Successfully processed '${file.name}' for ${
        processingOption === "all"
          ? "flashcards, summary & monologue"
          : processingOption || "summary"
      }.${audioFilePath ? " Audio generated." : ""} ${
        sessionId ? " Content saved to your account." : ""
      }`,
      resultText: generatedText,
      inputSource: "file",
      audioFilePath: audioFilePath || undefined,
      flashcardsText: flashcardsText,
      summaryText: summaryText,
      monologueText: monologueText,
      sessionId: sessionId || undefined,
    };
  } catch (error: any) {
    console.error("Error processing file with Gemini:", error);
    let errorMessage = "An unexpected error occurred during processing.";
    if (error.message.includes("SAFETY")) {
      errorMessage = "Content generation blocked due to safety settings.";
    } else if (error.message.includes("429")) {
      errorMessage = "Rate limit exceeded. Please try again later.";
    } else if (error.message.includes("API key not valid")) {
      errorMessage = "Invalid API Key.";
    } else if (error.message.includes("Could not initialize AI Model")) {
      errorMessage = error.message;
    }

    return {
      success: false,
      message: errorMessage,
      error: error.message || "Unknown API error",
      inputSource: "file",
    };
  }
}

// --- Server Action for YouTube Videos ---
export async function processYouTubeVideo(
  prevState: ActionResult | null,
  formData: FormData
): Promise<ActionResult> {
  console.log("Server Action: processYouTubeVideo triggered.");
  const youtubeUrl = formData.get("youtubeUrl") as string | null;
  const processingOption = formData.get("processingOption") as string | null;

  // Validation (remains the same)
  if (
    !youtubeUrl ||
    typeof youtubeUrl !== "string" ||
    youtubeUrl.trim() === ""
  ) {
    return {
      success: false,
      message: "YouTube URL is required.",
      error: "URL Missing",
      inputSource: "youtube",
    };
  }
  const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+/;
  if (!youtubeRegex.test(youtubeUrl)) {
    return {
      success: false,
      message: "Please enter a valid YouTube URL.",
      error: "Invalid URL Format",
      inputSource: "youtube",
    };
  }

  console.log(`Processing URL: ${youtubeUrl}, Option: ${processingOption}`);

  try {
    // Assuming there's some function to extract YouTube content (transcript/summary)
    // This would be implementation-specific to your needs
    // For now, let's call our model directly with the YouTube URL as context

    const model = getGeminiModel("gemini-1.5-flash");
    const textPrompt = `${getPromptForOption(processingOption, "video")} 
    YouTube Link: ${youtubeUrl}`;

    // Typical safety check (you can adjust thresholds as needed)
    const safetySettings = [
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
    ];

    console.log("Sending YouTube URL request to Gemini...");
    const result = await model.generateContent(textPrompt);
    const response = result.response;
    const generatedText = response.text();
    console.log("Gemini response received for YouTube URL.");

    // For "all" option, extract individual content sections
    let flashcardsText, summaryText, monologueText;
    let audioFilePath = null;

    if (processingOption === "all") {
      const sections = extractContentSections(generatedText);
      flashcardsText = sections.flashcards;
      summaryText = sections.summary;
      monologueText = sections.monologue;

      // Generate audio for the monologue part
      if (monologueText) {
        console.log("Generating audio for monologue...");
        audioFilePath = await generateConversationAudio(monologueText);
      }
    } else {
      // Generate audio if the option is "conversation"
      if (processingOption === "conversation") {
        console.log("Generating audio for conversation...");
        audioFilePath = await generateConversationAudio(generatedText);
        monologueText = generatedText;
      } else if (processingOption === "flashcards") {
        flashcardsText = generatedText;
      } else if (processingOption === "summary") {
        summaryText = generatedText;
      }
    }

    // Store the content in the database
    let sessionId = null;

    sessionId = await storeGeneratedContent(
      processingOption as any,
      {
        flashcards: flashcardsText,
        summary: summaryText,
        monologue: monologueText,
        audioPath: audioFilePath || undefined,
      },
      {
        sourceType: "youtube",
        sourceName: youtubeUrl,
      }
    );

    return {
      success: true,
      message: `Successfully processed YouTube video for ${
        processingOption === "all"
          ? "flashcards, summary & monologue"
          : processingOption || "summary"
      }.${audioFilePath ? " Audio generated." : ""} ${
        sessionId ? " Content saved to your account." : ""
      }`,
      resultText: generatedText,
      inputSource: "youtube",
      audioFilePath: audioFilePath || undefined,
      flashcardsText: flashcardsText,
      summaryText: summaryText,
      monologueText: monologueText,
      sessionId: sessionId || undefined,
    };
  } catch (error: any) {
    console.error("Error processing YouTube URL with Gemini:", error);
    let errorMessage = "An unexpected error occurred during processing.";
    if (error.message.includes("SAFETY")) {
      errorMessage = "Content generation blocked due to safety settings.";
    } else if (error.message.includes("429")) {
      errorMessage = "Rate limit exceeded. Please try again later.";
    } else if (error.message.includes("API key not valid")) {
      errorMessage = "Invalid API Key.";
    }

    return {
      success: false,
      message: errorMessage,
      error: error.message || "Unknown API error",
      inputSource: "youtube",
    };
  }
}
</file>

<file path="package.json">
{
  "name": "acharya-main",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "migrate": "npx tsx scripts/migrate.ts"
  },
  "dependencies": {
    "@clerk/nextjs": "^6.13.0",
    "@deepgram/sdk": "^3.11.3",
    "@google/generative-ai": "^0.24.0",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.1.2",
    "@radix-ui/react-tabs": "^1.1.3",
    "@types/mysql": "^2.15.27",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^16.4.7",
    "drizzle-orm": "^0.41.0",
    "lucide-react": "^0.487.0",
    "mysql2": "^3.14.0",
    "next": "15.2.4",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.1.7",
    "recharts": "^2.15.2",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.1",
    "sonner": "^2.0.3",
    "tailwind-merge": "^3.1.0",
    "tw-animate-css": "^1.2.5"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "autoprefixer": "^10.4.21",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.17",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5"
  }
}
</file>

</files>
